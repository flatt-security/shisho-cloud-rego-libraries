# - This code was generated by Shisho Cloud's internal system (protoc-gen-regolib).
# - When you find something to improve, you can create an GitHub issue, instead of creating pull requests.

package shisho.decision.aws.networking

import data.shisho

# @title Ensure the default security group restricts all traffic
# You can emit this decision as follows:
# 
# ```
# import data.shisho
# 
# decisions[d] {
#   # the resource ID to review (e.g. a GitHub repository, etc.)
#   subject := "test"
#
#   # whether the target is allowed by this policy or not
#   allowed := true
#
#   d := shisho.decision.aws.networking.sg_baseline({
#     "allowed": allowed,
#     "subject": subject,
#     "payload": shisho.decision.aws.networking.sg_baseline_payload({
#       "ip_permissions_egress": [{"ip_protocol": "example", "from_port": 0, "to_port": 0}],
#       "ip_permissions_ingress": [{"ip_protocol": "example", "from_port": 0, "to_port": 0}],
#     }),
#   })
# }
# ```

# METADATA
# title: "decision.api.shisho.dev/v1beta:aws_networking_sg_baseline"
# scope: "rule"
# description: |
#   Emits a decision whose type is decision.api.shisho.dev/v1beta:aws_networking_sg_baseline".
sg_baseline(d) = x {
	x := {
		"header": sg_baseline_header({
			"allowed": d.allowed,
			"subject": d.subject,
			"locator": sg_baseline_locator(d),
			"severity": sg_baseline_severity(d),
		}),
		"payload": d.payload,
	}
}

sg_baseline_severity(d) := shisho.decision.severity_info {
	d.allowed == true
} else := d.severity {
	not is_null(d.severity)
} else := 0

sg_baseline_locator(d) := d.locator {
	not is_null(d.locator)
} else := ""

sg_baseline_kind = "aws_networking_sg_baseline"

sg_baseline_header(h) = x {
	x := {
		"api_version": "decision.api.shisho.dev/v1beta",
		"kind": sg_baseline_kind,
		"subject": h.subject,
		"locator": h.locator,
		"severity": h.severity,
		"labels": {},
		"annotations": {
			"decision.api.shisho.dev:aws/cis-benchmark/v1.5.0": "5.4",
			"decision.api.shisho.dev:needs-manual-review": "false",
			"decision.api.shisho.dev:ssc/category": "infrastructure",
		},
		"type": shisho.decision.as_decision_type(sg_baseline_allowed(h)),
	}
}

# Force to allow the given decision following resource exception policy
sg_baseline_allowed(h) {
	data.params != null
	data.params.resource_exceptions != null
	shisho.resource.is_excepted(data.params.resource_exceptions, h.subject)
} else := h.allowed

# METADATA
# title: "Entry of decision.api.shisho.dev/v1beta:aws_networking_sg_baseline"
# scope: "rule"
# description: |
#   Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:aws_networking_sg_baseline
#
#   The parameter `data` is an object with the following fields: 
#   - ip_permissions_egress: {"ip_protocol": string, "from_port": number, "to_port": number}
#   - ip_permissions_ingress: {"ip_protocol": string, "from_port": number, "to_port": number}
#
#   For instance, `data` can take the following value:
#   ```rego
#   {
#     "ip_permissions_egress": [{"ip_protocol": "example", "from_port": 0, "to_port": 0}],
#     "ip_permissions_ingress": [{"ip_protocol": "example", "from_port": 0, "to_port": 0}],
#   }
#   ```
sg_baseline_payload(edata) = x {
	x := json.marshal(edata)
}

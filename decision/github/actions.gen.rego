# - This code was generated by Shisho Cloud's internal system (protoc-gen-regolib).
# - When you find something to improve, you can create an GitHub issue, instead of creating pull requests.

package shisho.decision.github

import data.shisho

# @title Ensure dependencies of GitHub Actions workflows are pinned to verified versions
# You can emit this decision as follows:
# 
# ```
# import data.shisho
# 
# decisions[d] {
#   # the target of the decision (e.g. a GitHub repository, etc.)
#   subject := "test"
#
#   # whether the target is allowed by this policy or not
#   allowed := true
#
#   # See the following for further information:
#   # ja: https:/shisho.dev/docs/g/api/graphql-schema
#   # en: https:/shisho.dev/docs/ja/g/api/graphql-schema
#   policyReportId := "..."
#
#   # evidence for the decision
#   entries := [
#     shisho.decision.github.actions_dependency_pinning_entry_v2(policyReportId, {
#       "unpinned_dependencies": [{"path": "./.github/workflows/test.yaml", "line": 1, "column": 1, "dependency": "example"}],
#     }),
#   ]
#
#   d := shisho.decision.github.actions_dependency_pinning({
#     "allowed": allowed
#     "subject": subject,
#     "entries": entries,
#   })
# }
# ```

# METADATA
# title: "decision.api.shisho.dev/v1beta:actions_dependency_pinning"
# scope: "rule"
# description: |
#   Emits a decision whose type is decision.api.shisho.dev/v1beta:actions_dependency_pinning".
actions_dependency_pinning(d) = x {
	x := {
		"header": actions_dependency_pinning_header({
			"allowed": d.allowed,
			"subject": d.subject,
		}),
		"entries": d.entries,
	}
}

actions_dependency_pinning_kind = "actions_dependency_pinning"

actions_dependency_pinning_header(h) = x {
	x := {
		"api_version": "decision.api.shisho.dev/v1beta",
		"kind": actions_dependency_pinning_kind,
		"subject": h.subject,
		"labels": {},
		"annotations": {
			"decision.api.shisho.dev:ssc/category": "dependency",
			"decision.api.shisho.dev:ssc/cis-benchmark/v1.0": "3.1.7",
		},
		"type": shisho.decision.as_decision_type(h.allowed),
	}
}

# METADATA
# title: "Entry of decision.api.shisho.dev/v1beta:actions_dependency_pinning"
# scope: "rule"
# description: "Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:actions_dependency_pinning"
actions_dependency_pinning_entry(report_id, unpinned_dependencies) = x {
	x := {
		"severity": 1,
		"resource_id": shisho.decision.as_resource_id(report_id),
		"data": json.marshal({"unpinned_dependencies": unpinned_dependencies}),
	}
}

# METADATA
# title: "Entry of decision.api.shisho.dev/v1beta:actions_dependency_pinning"
# scope: "rule"
# description: |
#   Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:actions_dependency_pinning
#
#   The parameter `data` is an object with the following fields: 
#   - unpinned_dependencies: {"path": string, "line": number, "column": number, "dependency": string}
#
#   For instance, `data` can take the following value:
#   ```rego
#   {
#     "unpinned_dependencies": [{"path": "./.github/workflows/test.yaml", "line": 1, "column": 1, "dependency": "example"}],
#   }
#   ```
actions_dependency_pinning_entry_v2(report_id, edata) = x {
	x := {
		"severity": 1,
		"resource_id": shisho.decision.as_resource_id(report_id),
		"data": json.marshal(edata),
	}
}

# METADATA
# title: "decision.api.shisho.dev/v1beta:actions_dependency_pinning"
# scope: "rule"
# description: |
#   Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:actions_dependency_pinning with a specified severity.
#   Visit decision/decision.rego to see all the severities.
actions_dependency_pinning_entry_with_severity(report_id, severity, unpinned_dependencies) = x {
	x := {
		"severity": severity,
		"resource_id": shisho.decision.as_resource_id(report_id),
		"data": json.marshal({"unpinned_dependencies": unpinned_dependencies}),
	}
}

# METADATA
# title: "decision.api.shisho.dev/v1beta:actions_dependency_pinning"
# scope: "rule"
# description: |
#   Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:actions_dependency_pinning with a specified severity.
#   Visit decision/decision.rego to see all the severities.
actions_dependency_pinning_entry_v2_with_severity(report_id, severity, edata) = x {
	x := {
		"severity": severity,
		"resource_id": shisho.decision.as_resource_id(report_id),
		"data": json.marshal(edata),
	}
}

# @title Ensure GitHub Actions workflows do not permit any script injections
# You can emit this decision as follows:
# 
# ```
# import data.shisho
# 
# decisions[d] {
#   # the target of the decision (e.g. a GitHub repository, etc.)
#   subject := "test"
#
#   # whether the target is allowed by this policy or not
#   allowed := true
#
#   # See the following for further information:
#   # ja: https:/shisho.dev/docs/g/api/graphql-schema
#   # en: https:/shisho.dev/docs/ja/g/api/graphql-schema
#   policyReportId := "..."
#
#   # evidence for the decision
#   entries := [
#     shisho.decision.github.actions_workflow_script_injection_possibility_entry_v2(policyReportId, {
#       "injectable_sinks": [{"path": "./.github/workflows/test.yaml", "line": 1, "column": 1, "abusable_fields": ["example"]}],
#     }),
#   ]
#
#   d := shisho.decision.github.actions_workflow_script_injection_possibility({
#     "allowed": allowed
#     "subject": subject,
#     "entries": entries,
#   })
# }
# ```

# METADATA
# title: "decision.api.shisho.dev/v1beta:actions_workflow_script_injection_possibility"
# scope: "rule"
# description: |
#   Emits a decision whose type is decision.api.shisho.dev/v1beta:actions_workflow_script_injection_possibility".
actions_workflow_script_injection_possibility(d) = x {
	x := {
		"header": actions_workflow_script_injection_possibility_header({
			"allowed": d.allowed,
			"subject": d.subject,
		}),
		"entries": d.entries,
	}
}

actions_workflow_script_injection_possibility_kind = "actions_workflow_script_injection_possibility"

actions_workflow_script_injection_possibility_header(h) = x {
	x := {
		"api_version": "decision.api.shisho.dev/v1beta",
		"kind": actions_workflow_script_injection_possibility_kind,
		"subject": h.subject,
		"labels": {},
		"annotations": {
			"decision.api.shisho.dev:ssc/category": "common",
			"decision.api.shisho.dev:ssc/cis-benchmark/v1.0": "1.3.8",
		},
		"type": shisho.decision.as_decision_type(h.allowed),
	}
}

# METADATA
# title: "Entry of decision.api.shisho.dev/v1beta:actions_workflow_script_injection_possibility"
# scope: "rule"
# description: "Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:actions_workflow_script_injection_possibility"
actions_workflow_script_injection_possibility_entry(report_id, injectable_sinks) = x {
	x := {
		"severity": 2,
		"resource_id": shisho.decision.as_resource_id(report_id),
		"data": json.marshal({"injectable_sinks": injectable_sinks}),
	}
}

# METADATA
# title: "Entry of decision.api.shisho.dev/v1beta:actions_workflow_script_injection_possibility"
# scope: "rule"
# description: |
#   Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:actions_workflow_script_injection_possibility
#
#   The parameter `data` is an object with the following fields: 
#   - injectable_sinks: {"path": string, "line": number, "column": number, "abusable_fields": string}
#
#   For instance, `data` can take the following value:
#   ```rego
#   {
#     "injectable_sinks": [{"path": "./.github/workflows/test.yaml", "line": 1, "column": 1, "abusable_fields": ["example"]}],
#   }
#   ```
actions_workflow_script_injection_possibility_entry_v2(report_id, edata) = x {
	x := {
		"severity": 2,
		"resource_id": shisho.decision.as_resource_id(report_id),
		"data": json.marshal(edata),
	}
}

# METADATA
# title: "decision.api.shisho.dev/v1beta:actions_workflow_script_injection_possibility"
# scope: "rule"
# description: |
#   Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:actions_workflow_script_injection_possibility with a specified severity.
#   Visit decision/decision.rego to see all the severities.
actions_workflow_script_injection_possibility_entry_with_severity(report_id, severity, injectable_sinks) = x {
	x := {
		"severity": severity,
		"resource_id": shisho.decision.as_resource_id(report_id),
		"data": json.marshal({"injectable_sinks": injectable_sinks}),
	}
}

# METADATA
# title: "decision.api.shisho.dev/v1beta:actions_workflow_script_injection_possibility"
# scope: "rule"
# description: |
#   Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:actions_workflow_script_injection_possibility with a specified severity.
#   Visit decision/decision.rego to see all the severities.
actions_workflow_script_injection_possibility_entry_v2_with_severity(report_id, severity, edata) = x {
	x := {
		"severity": severity,
		"resource_id": shisho.decision.as_resource_id(report_id),
		"data": json.marshal(edata),
	}
}

# @title Ensure secrets do not appear inGitHub Actions Workflows directly
# You can emit this decision as follows:
# 
# ```
# import data.shisho
# 
# decisions[d] {
#   # the target of the decision (e.g. a GitHub repository, etc.)
#   subject := "test"
#
#   # whether the target is allowed by this policy or not
#   allowed := true
#
#   # See the following for further information:
#   # ja: https:/shisho.dev/docs/g/api/graphql-schema
#   # en: https:/shisho.dev/docs/ja/g/api/graphql-schema
#   policyReportId := "..."
#
#   # evidence for the decision
#   entries := [
#     shisho.decision.github.actions_workflow_secret_handling_entry_v2(policyReportId, {
#       "hardcoded_secrets": [{"path": "./.github/workflows/test.yaml", "line": 1, "column": 1, "location_hint": "example"}],
#     }),
#   ]
#
#   d := shisho.decision.github.actions_workflow_secret_handling({
#     "allowed": allowed
#     "subject": subject,
#     "entries": entries,
#   })
# }
# ```

# METADATA
# title: "decision.api.shisho.dev/v1beta:actions_workflow_secret_handling"
# scope: "rule"
# description: |
#   Emits a decision whose type is decision.api.shisho.dev/v1beta:actions_workflow_secret_handling".
actions_workflow_secret_handling(d) = x {
	x := {
		"header": actions_workflow_secret_handling_header({
			"allowed": d.allowed,
			"subject": d.subject,
		}),
		"entries": d.entries,
	}
}

actions_workflow_secret_handling_kind = "actions_workflow_secret_handling"

actions_workflow_secret_handling_header(h) = x {
	x := {
		"api_version": "decision.api.shisho.dev/v1beta",
		"kind": actions_workflow_secret_handling_kind,
		"subject": h.subject,
		"labels": {},
		"annotations": {
			"decision.api.shisho.dev:ssc/category": "common",
			"decision.api.shisho.dev:ssc/cis-benchmark/v1.0": "1.5.1",
		},
		"type": shisho.decision.as_decision_type(h.allowed),
	}
}

# METADATA
# title: "Entry of decision.api.shisho.dev/v1beta:actions_workflow_secret_handling"
# scope: "rule"
# description: "Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:actions_workflow_secret_handling"
actions_workflow_secret_handling_entry(report_id, hardcoded_secrets) = x {
	x := {
		"severity": 4,
		"resource_id": shisho.decision.as_resource_id(report_id),
		"data": json.marshal({"hardcoded_secrets": hardcoded_secrets}),
	}
}

# METADATA
# title: "Entry of decision.api.shisho.dev/v1beta:actions_workflow_secret_handling"
# scope: "rule"
# description: |
#   Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:actions_workflow_secret_handling
#
#   The parameter `data` is an object with the following fields: 
#   - hardcoded_secrets: {"path": string, "line": number, "column": number, "location_hint": string}
#
#   For instance, `data` can take the following value:
#   ```rego
#   {
#     "hardcoded_secrets": [{"path": "./.github/workflows/test.yaml", "line": 1, "column": 1, "location_hint": "example"}],
#   }
#   ```
actions_workflow_secret_handling_entry_v2(report_id, edata) = x {
	x := {
		"severity": 4,
		"resource_id": shisho.decision.as_resource_id(report_id),
		"data": json.marshal(edata),
	}
}

# METADATA
# title: "decision.api.shisho.dev/v1beta:actions_workflow_secret_handling"
# scope: "rule"
# description: |
#   Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:actions_workflow_secret_handling with a specified severity.
#   Visit decision/decision.rego to see all the severities.
actions_workflow_secret_handling_entry_with_severity(report_id, severity, hardcoded_secrets) = x {
	x := {
		"severity": severity,
		"resource_id": shisho.decision.as_resource_id(report_id),
		"data": json.marshal({"hardcoded_secrets": hardcoded_secrets}),
	}
}

# METADATA
# title: "decision.api.shisho.dev/v1beta:actions_workflow_secret_handling"
# scope: "rule"
# description: |
#   Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:actions_workflow_secret_handling with a specified severity.
#   Visit decision/decision.rego to see all the severities.
actions_workflow_secret_handling_entry_v2_with_severity(report_id, severity, edata) = x {
	x := {
		"severity": severity,
		"resource_id": shisho.decision.as_resource_id(report_id),
		"data": json.marshal(edata),
	}
}

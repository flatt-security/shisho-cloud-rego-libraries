# - This code was generated by Shisho Cloud's internal system (protoc-gen-regolib).
# - When you find something to improve, you can create an GitHub issue, instead of creating pull requests.

package shisho.decision.github

import data.shisho

# @title Enforce two-factor authentication on GitHub organization(s)
# You can emit this decision as follows:
# 
# ```
# import data.shisho
# 
# decisions[d] {
#   # the resource ID to review (e.g. a GitHub repository, etc.)
#   subject := "test"
#
#   # whether the target is allowed by this policy or not
#   allowed := true
#
#   d := shisho.decision.github.org_2fa_status({
#     "allowed": allowed,
#     "subject": subject,
#     "payload": shisho.decision.github.org_2fa_status_payload({
#       "enabled": false,
#     }),
#   })
# }
# ```

# METADATA
# title: "decision.api.shisho.dev/v1beta:github_org_2fa_status"
# scope: "rule"
# description: |
#   Emits a decision whose type is decision.api.shisho.dev/v1beta:github_org_2fa_status".
org_2fa_status(d) = x {
	x := {
		"header": org_2fa_status_header({
			"allowed": d.allowed,
			"subject": d.subject,
			"locator": org_2fa_status_locator(d),
			"severity": org_2fa_status_severity(d),
		}),
		"payload": d.payload,
	}
}

org_2fa_status_severity(d) := shisho.decision.severity_info {
	d.allowed == true
} else := d.severity {
	not is_null(d.severity)
} else := 1

org_2fa_status_locator(d) := d.locator {
	not is_null(d.locator)
} else := ""

org_2fa_status_kind = "github_org_2fa_status"

org_2fa_status_header(h) = x {
	x := {
		"api_version": "decision.api.shisho.dev/v1beta",
		"kind": org_2fa_status_kind,
		"subject": h.subject,
		"locator": h.locator,
		"severity": h.severity,
		"labels": {},
		"annotations": {
			"decision.api.shisho.dev:ssc/category": "common",
			"decision.api.shisho.dev:ssc/cis-benchmark/v1.0": "1.3.5",
		},
		"type": shisho.decision.as_decision_type(org_2fa_status_allowed(h)),
	}
}

# Force to allow the given decision following resource exception policy
org_2fa_status_allowed(h) {
	data.params != null
	data.params.resource_exceptions != null
	shisho.resource.is_excepted(data.params.resource_exceptions, h.subject)
} else := h.allowed

# METADATA
# title: "Entry of decision.api.shisho.dev/v1beta:github_org_2fa_status"
# scope: "rule"
# description: |
#   Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:github_org_2fa_status
#
#   The parameter `data` is an object with the following fields: 
#   - enabled: boolean
#
#   For instance, `data` can take the following value:
#   ```rego
#   {
#     "enabled": false,
#   }
#   ```
org_2fa_status_payload(edata) = x {
	x := json.marshal(edata)
}

# @title Ensure strict base permissions are set for repositories
# You can emit this decision as follows:
# 
# ```
# import data.shisho
# 
# decisions[d] {
#   # the resource ID to review (e.g. a GitHub repository, etc.)
#   subject := "test"
#
#   # whether the target is allowed by this policy or not
#   allowed := true
#
#   d := shisho.decision.github.org_default_repository_permission({
#     "allowed": allowed,
#     "subject": subject,
#     "payload": shisho.decision.github.org_default_repository_permission_payload({
#       "current": "example",
#     }),
#   })
# }
# ```

# METADATA
# title: "decision.api.shisho.dev/v1beta:github_org_default_repository_permission"
# scope: "rule"
# description: |
#   Emits a decision whose type is decision.api.shisho.dev/v1beta:github_org_default_repository_permission".
org_default_repository_permission(d) = x {
	x := {
		"header": org_default_repository_permission_header({
			"allowed": d.allowed,
			"subject": d.subject,
			"locator": org_default_repository_permission_locator(d),
			"severity": org_default_repository_permission_severity(d),
		}),
		"payload": d.payload,
	}
}

org_default_repository_permission_severity(d) := shisho.decision.severity_info {
	d.allowed == true
} else := d.severity {
	not is_null(d.severity)
} else := 1

org_default_repository_permission_locator(d) := d.locator {
	not is_null(d.locator)
} else := ""

org_default_repository_permission_kind = "github_org_default_repository_permission"

org_default_repository_permission_header(h) = x {
	x := {
		"api_version": "decision.api.shisho.dev/v1beta",
		"kind": org_default_repository_permission_kind,
		"subject": h.subject,
		"locator": h.locator,
		"severity": h.severity,
		"labels": {},
		"annotations": {
			"decision.api.shisho.dev:ssc/category": "common",
			"decision.api.shisho.dev:ssc/cis-benchmark/v1.0": "1.3.8",
		},
		"type": shisho.decision.as_decision_type(org_default_repository_permission_allowed(h)),
	}
}

# Force to allow the given decision following resource exception policy
org_default_repository_permission_allowed(h) {
	data.params != null
	data.params.resource_exceptions != null
	shisho.resource.is_excepted(data.params.resource_exceptions, h.subject)
} else := h.allowed

# METADATA
# title: "Entry of decision.api.shisho.dev/v1beta:github_org_default_repository_permission"
# scope: "rule"
# description: |
#   Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:github_org_default_repository_permission
#
#   The parameter `data` is an object with the following fields: 
#   - current: string
#
#   For instance, `data` can take the following value:
#   ```rego
#   {
#     "current": "example",
#   }
#   ```
org_default_repository_permission_payload(edata) = x {
	x := json.marshal(edata)
}

# @title Ensure creation of GitHub public pages is restricted
# You can emit this decision as follows:
# 
# ```
# import data.shisho
# 
# decisions[d] {
#   # the resource ID to review (e.g. a GitHub repository, etc.)
#   subject := "test"
#
#   # whether the target is allowed by this policy or not
#   allowed := true
#
#   d := shisho.decision.github.org_members_permission_on_creating_public_pages({
#     "allowed": allowed,
#     "subject": subject,
#     "payload": shisho.decision.github.org_members_permission_on_creating_public_pages_payload({
#       "allowed": false,
#     }),
#   })
# }
# ```

# METADATA
# title: "decision.api.shisho.dev/v1beta:github_org_members_permission_on_creating_public_pages"
# scope: "rule"
# description: |
#   Emits a decision whose type is decision.api.shisho.dev/v1beta:github_org_members_permission_on_creating_public_pages".
org_members_permission_on_creating_public_pages(d) = x {
	x := {
		"header": org_members_permission_on_creating_public_pages_header({
			"allowed": d.allowed,
			"subject": d.subject,
			"locator": org_members_permission_on_creating_public_pages_locator(d),
			"severity": org_members_permission_on_creating_public_pages_severity(d),
		}),
		"payload": d.payload,
	}
}

org_members_permission_on_creating_public_pages_severity(d) := shisho.decision.severity_info {
	d.allowed == true
} else := d.severity {
	not is_null(d.severity)
} else := 1

org_members_permission_on_creating_public_pages_locator(d) := d.locator {
	not is_null(d.locator)
} else := ""

org_members_permission_on_creating_public_pages_kind = "github_org_members_permission_on_creating_public_pages"

org_members_permission_on_creating_public_pages_header(h) = x {
	x := {
		"api_version": "decision.api.shisho.dev/v1beta",
		"kind": org_members_permission_on_creating_public_pages_kind,
		"subject": h.subject,
		"locator": h.locator,
		"severity": h.severity,
		"labels": {},
		"annotations": {"decision.api.shisho.dev:ssc/category": "common"},
		"type": shisho.decision.as_decision_type(org_members_permission_on_creating_public_pages_allowed(h)),
	}
}

# Force to allow the given decision following resource exception policy
org_members_permission_on_creating_public_pages_allowed(h) {
	data.params != null
	data.params.resource_exceptions != null
	shisho.resource.is_excepted(data.params.resource_exceptions, h.subject)
} else := h.allowed

# METADATA
# title: "Entry of decision.api.shisho.dev/v1beta:github_org_members_permission_on_creating_public_pages"
# scope: "rule"
# description: |
#   Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:github_org_members_permission_on_creating_public_pages
#
#   The parameter `data` is an object with the following fields: 
#   - allowed: boolean
#
#   For instance, `data` can take the following value:
#   ```rego
#   {
#     "allowed": false,
#   }
#   ```
org_members_permission_on_creating_public_pages_payload(edata) = x {
	x := json.marshal(edata)
}

# @title Ensure public repository creation is limited to specific members
# You can emit this decision as follows:
# 
# ```
# import data.shisho
# 
# decisions[d] {
#   # the resource ID to review (e.g. a GitHub repository, etc.)
#   subject := "test"
#
#   # whether the target is allowed by this policy or not
#   allowed := true
#
#   d := shisho.decision.github.org_members_permission_on_creating_public_repos({
#     "allowed": allowed,
#     "subject": subject,
#     "payload": shisho.decision.github.org_members_permission_on_creating_public_repos_payload({
#       "allowed": false,
#     }),
#   })
# }
# ```

# METADATA
# title: "decision.api.shisho.dev/v1beta:github_org_members_permission_on_creating_public_repos"
# scope: "rule"
# description: |
#   Emits a decision whose type is decision.api.shisho.dev/v1beta:github_org_members_permission_on_creating_public_repos".
org_members_permission_on_creating_public_repos(d) = x {
	x := {
		"header": org_members_permission_on_creating_public_repos_header({
			"allowed": d.allowed,
			"subject": d.subject,
			"locator": org_members_permission_on_creating_public_repos_locator(d),
			"severity": org_members_permission_on_creating_public_repos_severity(d),
		}),
		"payload": d.payload,
	}
}

org_members_permission_on_creating_public_repos_severity(d) := shisho.decision.severity_info {
	d.allowed == true
} else := d.severity {
	not is_null(d.severity)
} else := 1

org_members_permission_on_creating_public_repos_locator(d) := d.locator {
	not is_null(d.locator)
} else := ""

org_members_permission_on_creating_public_repos_kind = "github_org_members_permission_on_creating_public_repos"

org_members_permission_on_creating_public_repos_header(h) = x {
	x := {
		"api_version": "decision.api.shisho.dev/v1beta",
		"kind": org_members_permission_on_creating_public_repos_kind,
		"subject": h.subject,
		"locator": h.locator,
		"severity": h.severity,
		"labels": {},
		"annotations": {
			"decision.api.shisho.dev:ssc/category": "source",
			"decision.api.shisho.dev:ssc/cis-benchmark/v1.0": "1.2.2",
		},
		"type": shisho.decision.as_decision_type(org_members_permission_on_creating_public_repos_allowed(h)),
	}
}

# Force to allow the given decision following resource exception policy
org_members_permission_on_creating_public_repos_allowed(h) {
	data.params != null
	data.params.resource_exceptions != null
	shisho.resource.is_excepted(data.params.resource_exceptions, h.subject)
} else := h.allowed

# METADATA
# title: "Entry of decision.api.shisho.dev/v1beta:github_org_members_permission_on_creating_public_repos"
# scope: "rule"
# description: |
#   Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:github_org_members_permission_on_creating_public_repos
#
#   The parameter `data` is an object with the following fields: 
#   - allowed: boolean
#
#   For instance, `data` can take the following value:
#   ```rego
#   {
#     "allowed": false,
#   }
#   ```
org_members_permission_on_creating_public_repos_payload(edata) = x {
	x := json.marshal(edata)
}

# @title Ensure forking of GitHub repositories is restricted
# You can emit this decision as follows:
# 
# ```
# import data.shisho
# 
# decisions[d] {
#   # the resource ID to review (e.g. a GitHub repository, etc.)
#   subject := "test"
#
#   # whether the target is allowed by this policy or not
#   allowed := true
#
#   d := shisho.decision.github.org_members_permission_on_private_forking({
#     "allowed": allowed,
#     "subject": subject,
#     "payload": shisho.decision.github.org_members_permission_on_private_forking_payload({
#       "allowed": false,
#     }),
#   })
# }
# ```

# METADATA
# title: "decision.api.shisho.dev/v1beta:github_org_members_permission_on_private_forking"
# scope: "rule"
# description: |
#   Emits a decision whose type is decision.api.shisho.dev/v1beta:github_org_members_permission_on_private_forking".
org_members_permission_on_private_forking(d) = x {
	x := {
		"header": org_members_permission_on_private_forking_header({
			"allowed": d.allowed,
			"subject": d.subject,
			"locator": org_members_permission_on_private_forking_locator(d),
			"severity": org_members_permission_on_private_forking_severity(d),
		}),
		"payload": d.payload,
	}
}

org_members_permission_on_private_forking_severity(d) := shisho.decision.severity_info {
	d.allowed == true
} else := d.severity {
	not is_null(d.severity)
} else := 1

org_members_permission_on_private_forking_locator(d) := d.locator {
	not is_null(d.locator)
} else := ""

org_members_permission_on_private_forking_kind = "github_org_members_permission_on_private_forking"

org_members_permission_on_private_forking_header(h) = x {
	x := {
		"api_version": "decision.api.shisho.dev/v1beta",
		"kind": org_members_permission_on_private_forking_kind,
		"subject": h.subject,
		"locator": h.locator,
		"severity": h.severity,
		"labels": {},
		"annotations": {"decision.api.shisho.dev:ssc/category": "common"},
		"type": shisho.decision.as_decision_type(org_members_permission_on_private_forking_allowed(h)),
	}
}

# Force to allow the given decision following resource exception policy
org_members_permission_on_private_forking_allowed(h) {
	data.params != null
	data.params.resource_exceptions != null
	shisho.resource.is_excepted(data.params.resource_exceptions, h.subject)
} else := h.allowed

# METADATA
# title: "Entry of decision.api.shisho.dev/v1beta:github_org_members_permission_on_private_forking"
# scope: "rule"
# description: |
#   Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:github_org_members_permission_on_private_forking
#
#   The parameter `data` is an object with the following fields: 
#   - allowed: boolean
#
#   For instance, `data` can take the following value:
#   ```rego
#   {
#     "allowed": false,
#   }
#   ```
org_members_permission_on_private_forking_payload(edata) = x {
	x := json.marshal(edata)
}

# @title Ensure minimum number of administrators are set for the organization
# You can emit this decision as follows:
# 
# ```
# import data.shisho
# 
# decisions[d] {
#   # the resource ID to review (e.g. a GitHub repository, etc.)
#   subject := "test"
#
#   # whether the target is allowed by this policy or not
#   allowed := true
#
#   d := shisho.decision.github.org_owners({
#     "allowed": allowed,
#     "subject": subject,
#     "payload": shisho.decision.github.org_owners_payload({
#       "admins": ["example"],
#     }),
#   })
# }
# ```

# METADATA
# title: "decision.api.shisho.dev/v1beta:github_org_owners"
# scope: "rule"
# description: |
#   Emits a decision whose type is decision.api.shisho.dev/v1beta:github_org_owners".
org_owners(d) = x {
	x := {
		"header": org_owners_header({
			"allowed": d.allowed,
			"subject": d.subject,
			"locator": org_owners_locator(d),
			"severity": org_owners_severity(d),
		}),
		"payload": d.payload,
	}
}

org_owners_severity(d) := shisho.decision.severity_info {
	d.allowed == true
} else := d.severity {
	not is_null(d.severity)
} else := 1

org_owners_locator(d) := d.locator {
	not is_null(d.locator)
} else := ""

org_owners_kind = "github_org_owners"

org_owners_header(h) = x {
	x := {
		"api_version": "decision.api.shisho.dev/v1beta",
		"kind": org_owners_kind,
		"subject": h.subject,
		"locator": h.locator,
		"severity": h.severity,
		"labels": {},
		"annotations": {
			"decision.api.shisho.dev:ssc/category": "common",
			"decision.api.shisho.dev:ssc/cis-benchmark/v1.0": "1.3.3",
		},
		"type": shisho.decision.as_decision_type(org_owners_allowed(h)),
	}
}

# Force to allow the given decision following resource exception policy
org_owners_allowed(h) {
	data.params != null
	data.params.resource_exceptions != null
	shisho.resource.is_excepted(data.params.resource_exceptions, h.subject)
} else := h.allowed

# METADATA
# title: "Entry of decision.api.shisho.dev/v1beta:github_org_owners"
# scope: "rule"
# description: |
#   Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:github_org_owners
#
#   The parameter `data` is an object with the following fields: 
#   - admins: string
#
#   For instance, `data` can take the following value:
#   ```rego
#   {
#     "admins": ["example"],
#   }
#   ```
org_owners_payload(edata) = x {
	x := json.marshal(edata)
}

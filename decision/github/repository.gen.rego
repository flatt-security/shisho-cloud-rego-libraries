# - This code was generated by Shisho Cloud's internal system (protoc-gen-regolib).
# - When you find something to improve, you can create an GitHub issue, instead of creating pull requests.

package shisho.decision.github

import data.shisho

# @title Ensure the deletion of protected branches is limited
# You can emit this decision as follows:
# 
# ```
# import data.shisho
# 
# decisions[d] {
#   # the target of the decision (e.g. a GitHub repository, etc.)
#   subject := "test"
#
#   # whether the target is allowed by this policy or not
#   allowed := true
#
#   # See the following for further information:
#   # ja: https:/shisho.dev/docs/g/api/graphql-schema
#   # en: https:/shisho.dev/docs/ja/g/api/graphql-schema
#   policyReportId := "..."
#
#   # evidence for the decision
#   entries := [
#     shisho.decision.github.branch_deletion_policy_entry_v2(policyReportId, {
#       "allowed": false,
#       "subject_branch": "example",
#     }),
#   ]
#
#   d := shisho.decision.github.branch_deletion_policy({
#     "allowed": allowed
#     "subject": subject,
#     "entries": entries,
#   })
# }
# ```

# METADATA
# title: "decision.api.shisho.dev/v1beta:branch_deletion_policy"
# scope: "rule"
# description: |
#   Emits a decision whose type is decision.api.shisho.dev/v1beta:branch_deletion_policy".
branch_deletion_policy(d) = x {
	x := {
		"header": branch_deletion_policy_header({
			"allowed": d.allowed,
			"subject": d.subject,
		}),
		"entries": d.entries,
	}
}

branch_deletion_policy_kind = "branch_deletion_policy"

branch_deletion_policy_header(h) = x {
	x := {
		"api_version": "decision.api.shisho.dev/v1beta",
		"kind": branch_deletion_policy_kind,
		"subject": h.subject,
		"labels": {},
		"annotations": {
			"decision.api.shisho.dev:ssc/category": "source",
			"decision.api.shisho.dev:ssc/cis-benchmark/v1.0": "1.1.17",
		},
		"type": shisho.decision.as_decision_type(h.allowed),
	}
}

# METADATA
# title: "Entry of decision.api.shisho.dev/v1beta:branch_deletion_policy"
# scope: "rule"
# description: "Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:branch_deletion_policy"
branch_deletion_policy_entry(report_id, allowed, subject_branch) = x {
	x := {
		"severity": 2,
		"resource_id": shisho.decision.as_resource_id(report_id),
		"data": json.marshal({"allowed": allowed, "subject_branch": subject_branch}),
	}
}

# METADATA
# title: "Entry of decision.api.shisho.dev/v1beta:branch_deletion_policy"
# scope: "rule"
# description: |
#   Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:branch_deletion_policy
#
#   The parameter `data` is an object with the following fields: 
#   - allowed: boolean
#   - subject_branch: string
#
#   For instance, `data` can take the following value:
#   ```rego
#   {
#     "allowed": false,
#     "subject_branch": "example",
#   }
#   ```
branch_deletion_policy_entry_v2(report_id, edata) = x {
	x := {
		"severity": 2,
		"resource_id": shisho.decision.as_resource_id(report_id),
		"data": json.marshal(edata),
	}
}

# METADATA
# title: "decision.api.shisho.dev/v1beta:branch_deletion_policy"
# scope: "rule"
# description: |
#   Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:branch_deletion_policy with a specified severity.
#   Visit decision/decision.rego to see all the severities.
branch_deletion_policy_entry_with_severity(report_id, severity, allowed, subject_branch) = x {
	x := {
		"severity": severity,
		"resource_id": shisho.decision.as_resource_id(report_id),
		"data": json.marshal({"allowed": allowed, "subject_branch": subject_branch}),
	}
}

# METADATA
# title: "decision.api.shisho.dev/v1beta:branch_deletion_policy"
# scope: "rule"
# description: |
#   Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:branch_deletion_policy with a specified severity.
#   Visit decision/decision.rego to see all the severities.
branch_deletion_policy_entry_v2_with_severity(report_id, severity, edata) = x {
	x := {
		"severity": severity,
		"resource_id": shisho.decision.as_resource_id(report_id),
		"data": json.marshal(edata),
	}
}

# @title Ensure code ownerâ€™s review is required when a change affects owned code
# You can emit this decision as follows:
# 
# ```
# import data.shisho
# 
# decisions[d] {
#   # the target of the decision (e.g. a GitHub repository, etc.)
#   subject := "test"
#
#   # whether the target is allowed by this policy or not
#   allowed := true
#
#   # See the following for further information:
#   # ja: https:/shisho.dev/docs/g/api/graphql-schema
#   # en: https:/shisho.dev/docs/ja/g/api/graphql-schema
#   policyReportId := "..."
#
#   # evidence for the decision
#   entries := [
#     shisho.decision.github.code_owners_review_policy_entry_v2(policyReportId, {
#       "required": false,
#       "subject_branch": "example",
#     }),
#   ]
#
#   d := shisho.decision.github.code_owners_review_policy({
#     "allowed": allowed
#     "subject": subject,
#     "entries": entries,
#   })
# }
# ```

# METADATA
# title: "decision.api.shisho.dev/v1beta:code_owners_review_policy"
# scope: "rule"
# description: |
#   Emits a decision whose type is decision.api.shisho.dev/v1beta:code_owners_review_policy".
code_owners_review_policy(d) = x {
	x := {
		"header": code_owners_review_policy_header({
			"allowed": d.allowed,
			"subject": d.subject,
		}),
		"entries": d.entries,
	}
}

code_owners_review_policy_kind = "code_owners_review_policy"

code_owners_review_policy_header(h) = x {
	x := {
		"api_version": "decision.api.shisho.dev/v1beta",
		"kind": code_owners_review_policy_kind,
		"subject": h.subject,
		"labels": {},
		"annotations": {
			"decision.api.shisho.dev:ssc/category": "source",
			"decision.api.shisho.dev:ssc/cis-benchmark/v1.0": "1.1.7",
		},
		"type": shisho.decision.as_decision_type(h.allowed),
	}
}

# METADATA
# title: "Entry of decision.api.shisho.dev/v1beta:code_owners_review_policy"
# scope: "rule"
# description: "Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:code_owners_review_policy"
code_owners_review_policy_entry(report_id, required, subject_branch) = x {
	x := {
		"severity": 1,
		"resource_id": shisho.decision.as_resource_id(report_id),
		"data": json.marshal({"required": required, "subject_branch": subject_branch}),
	}
}

# METADATA
# title: "Entry of decision.api.shisho.dev/v1beta:code_owners_review_policy"
# scope: "rule"
# description: |
#   Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:code_owners_review_policy
#
#   The parameter `data` is an object with the following fields: 
#   - required: boolean
#   - subject_branch: string
#
#   For instance, `data` can take the following value:
#   ```rego
#   {
#     "required": false,
#     "subject_branch": "example",
#   }
#   ```
code_owners_review_policy_entry_v2(report_id, edata) = x {
	x := {
		"severity": 1,
		"resource_id": shisho.decision.as_resource_id(report_id),
		"data": json.marshal(edata),
	}
}

# METADATA
# title: "decision.api.shisho.dev/v1beta:code_owners_review_policy"
# scope: "rule"
# description: |
#   Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:code_owners_review_policy with a specified severity.
#   Visit decision/decision.rego to see all the severities.
code_owners_review_policy_entry_with_severity(report_id, severity, required, subject_branch) = x {
	x := {
		"severity": severity,
		"resource_id": shisho.decision.as_resource_id(report_id),
		"data": json.marshal({"required": required, "subject_branch": subject_branch}),
	}
}

# METADATA
# title: "decision.api.shisho.dev/v1beta:code_owners_review_policy"
# scope: "rule"
# description: |
#   Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:code_owners_review_policy with a specified severity.
#   Visit decision/decision.rego to see all the severities.
code_owners_review_policy_entry_v2_with_severity(report_id, severity, edata) = x {
	x := {
		"severity": severity,
		"resource_id": shisho.decision.as_resource_id(report_id),
		"data": json.marshal(edata),
	}
}

# @title Ensure verification of signed commits for new changes before merging
# You can emit this decision as follows:
# 
# ```
# import data.shisho
# 
# decisions[d] {
#   # the target of the decision (e.g. a GitHub repository, etc.)
#   subject := "test"
#
#   # whether the target is allowed by this policy or not
#   allowed := true
#
#   # See the following for further information:
#   # ja: https:/shisho.dev/docs/g/api/graphql-schema
#   # en: https:/shisho.dev/docs/ja/g/api/graphql-schema
#   policyReportId := "..."
#
#   # evidence for the decision
#   entries := [
#     shisho.decision.github.commit_signature_policy_entry_v2(policyReportId, {
#       "required": false,
#       "subject_branch": "example",
#     }),
#   ]
#
#   d := shisho.decision.github.commit_signature_policy({
#     "allowed": allowed
#     "subject": subject,
#     "entries": entries,
#   })
# }
# ```

# METADATA
# title: "decision.api.shisho.dev/v1beta:commit_signature_policy"
# scope: "rule"
# description: |
#   Emits a decision whose type is decision.api.shisho.dev/v1beta:commit_signature_policy".
commit_signature_policy(d) = x {
	x := {
		"header": commit_signature_policy_header({
			"allowed": d.allowed,
			"subject": d.subject,
		}),
		"entries": d.entries,
	}
}

commit_signature_policy_kind = "commit_signature_policy"

commit_signature_policy_header(h) = x {
	x := {
		"api_version": "decision.api.shisho.dev/v1beta",
		"kind": commit_signature_policy_kind,
		"subject": h.subject,
		"labels": {},
		"annotations": {
			"decision.api.shisho.dev:ssc/category": "source",
			"decision.api.shisho.dev:ssc/cis-benchmark/v1.0": "1.1.12",
		},
		"type": shisho.decision.as_decision_type(h.allowed),
	}
}

# METADATA
# title: "Entry of decision.api.shisho.dev/v1beta:commit_signature_policy"
# scope: "rule"
# description: "Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:commit_signature_policy"
commit_signature_policy_entry(report_id, required, subject_branch) = x {
	x := {
		"severity": 0,
		"resource_id": shisho.decision.as_resource_id(report_id),
		"data": json.marshal({"required": required, "subject_branch": subject_branch}),
	}
}

# METADATA
# title: "Entry of decision.api.shisho.dev/v1beta:commit_signature_policy"
# scope: "rule"
# description: |
#   Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:commit_signature_policy
#
#   The parameter `data` is an object with the following fields: 
#   - required: boolean
#   - subject_branch: string
#
#   For instance, `data` can take the following value:
#   ```rego
#   {
#     "required": false,
#     "subject_branch": "example",
#   }
#   ```
commit_signature_policy_entry_v2(report_id, edata) = x {
	x := {
		"severity": 0,
		"resource_id": shisho.decision.as_resource_id(report_id),
		"data": json.marshal(edata),
	}
}

# METADATA
# title: "decision.api.shisho.dev/v1beta:commit_signature_policy"
# scope: "rule"
# description: |
#   Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:commit_signature_policy with a specified severity.
#   Visit decision/decision.rego to see all the severities.
commit_signature_policy_entry_with_severity(report_id, severity, required, subject_branch) = x {
	x := {
		"severity": severity,
		"resource_id": shisho.decision.as_resource_id(report_id),
		"data": json.marshal({"required": required, "subject_branch": subject_branch}),
	}
}

# METADATA
# title: "decision.api.shisho.dev/v1beta:commit_signature_policy"
# scope: "rule"
# description: |
#   Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:commit_signature_policy with a specified severity.
#   Visit decision/decision.rego to see all the severities.
commit_signature_policy_entry_v2_with_severity(report_id, severity, edata) = x {
	x := {
		"severity": severity,
		"resource_id": shisho.decision.as_resource_id(report_id),
		"data": json.marshal(edata),
	}
}

# @title Keep a default branch protected by branch protection rule(s)
# You can emit this decision as follows:
# 
# ```
# import data.shisho
# 
# decisions[d] {
#   # the target of the decision (e.g. a GitHub repository, etc.)
#   subject := "test"
#
#   # whether the target is allowed by this policy or not
#   allowed := true
#
#   # See the following for further information:
#   # ja: https:/shisho.dev/docs/g/api/graphql-schema
#   # en: https:/shisho.dev/docs/ja/g/api/graphql-schema
#   policyReportId := "..."
#
#   # evidence for the decision
#   entries := [
#     shisho.decision.github.default_branch_protection_entry_v2(policyReportId, {
#       "default_branch_name": "example",
#     }),
#   ]
#
#   d := shisho.decision.github.default_branch_protection({
#     "allowed": allowed
#     "subject": subject,
#     "entries": entries,
#   })
# }
# ```

# METADATA
# title: "decision.api.shisho.dev/v1beta:default_branch_protection"
# scope: "rule"
# description: |
#   Emits a decision whose type is decision.api.shisho.dev/v1beta:default_branch_protection".
default_branch_protection(d) = x {
	x := {
		"header": default_branch_protection_header({
			"allowed": d.allowed,
			"subject": d.subject,
		}),
		"entries": d.entries,
	}
}

default_branch_protection_kind = "default_branch_protection"

default_branch_protection_header(h) = x {
	x := {
		"api_version": "decision.api.shisho.dev/v1beta",
		"kind": default_branch_protection_kind,
		"subject": h.subject,
		"labels": {},
		"annotations": {
			"decision.api.shisho.dev:ssc/category": "source",
			"decision.api.shisho.dev:ssc/cis-benchmark/v1.0": "1.1.14",
		},
		"type": shisho.decision.as_decision_type(h.allowed),
	}
}

# METADATA
# title: "Entry of decision.api.shisho.dev/v1beta:default_branch_protection"
# scope: "rule"
# description: "Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:default_branch_protection"
default_branch_protection_entry(report_id, default_branch_name) = x {
	x := {
		"severity": 2,
		"resource_id": shisho.decision.as_resource_id(report_id),
		"data": json.marshal({"default_branch_name": default_branch_name}),
	}
}

# METADATA
# title: "Entry of decision.api.shisho.dev/v1beta:default_branch_protection"
# scope: "rule"
# description: |
#   Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:default_branch_protection
#
#   The parameter `data` is an object with the following fields: 
#   - default_branch_name: string
#
#   For instance, `data` can take the following value:
#   ```rego
#   {
#     "default_branch_name": "example",
#   }
#   ```
default_branch_protection_entry_v2(report_id, edata) = x {
	x := {
		"severity": 2,
		"resource_id": shisho.decision.as_resource_id(report_id),
		"data": json.marshal(edata),
	}
}

# METADATA
# title: "decision.api.shisho.dev/v1beta:default_branch_protection"
# scope: "rule"
# description: |
#   Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:default_branch_protection with a specified severity.
#   Visit decision/decision.rego to see all the severities.
default_branch_protection_entry_with_severity(report_id, severity, default_branch_name) = x {
	x := {
		"severity": severity,
		"resource_id": shisho.decision.as_resource_id(report_id),
		"data": json.marshal({"default_branch_name": default_branch_name}),
	}
}

# METADATA
# title: "decision.api.shisho.dev/v1beta:default_branch_protection"
# scope: "rule"
# description: |
#   Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:default_branch_protection with a specified severity.
#   Visit decision/decision.rego to see all the severities.
default_branch_protection_entry_v2_with_severity(report_id, severity, edata) = x {
	x := {
		"severity": severity,
		"resource_id": shisho.decision.as_resource_id(report_id),
		"data": json.marshal(edata),
	}
}

# @title Ensure force push code to branches is denied
# You can emit this decision as follows:
# 
# ```
# import data.shisho
# 
# decisions[d] {
#   # the target of the decision (e.g. a GitHub repository, etc.)
#   subject := "test"
#
#   # whether the target is allowed by this policy or not
#   allowed := true
#
#   # See the following for further information:
#   # ja: https:/shisho.dev/docs/g/api/graphql-schema
#   # en: https:/shisho.dev/docs/ja/g/api/graphql-schema
#   policyReportId := "..."
#
#   # evidence for the decision
#   entries := [
#     shisho.decision.github.force_push_policy_entry_v2(policyReportId, {
#       "allowed": false,
#       "subject_branch": "example",
#     }),
#   ]
#
#   d := shisho.decision.github.force_push_policy({
#     "allowed": allowed
#     "subject": subject,
#     "entries": entries,
#   })
# }
# ```

# METADATA
# title: "decision.api.shisho.dev/v1beta:force_push_policy"
# scope: "rule"
# description: |
#   Emits a decision whose type is decision.api.shisho.dev/v1beta:force_push_policy".
force_push_policy(d) = x {
	x := {
		"header": force_push_policy_header({
			"allowed": d.allowed,
			"subject": d.subject,
		}),
		"entries": d.entries,
	}
}

force_push_policy_kind = "force_push_policy"

force_push_policy_header(h) = x {
	x := {
		"api_version": "decision.api.shisho.dev/v1beta",
		"kind": force_push_policy_kind,
		"subject": h.subject,
		"labels": {},
		"annotations": {
			"decision.api.shisho.dev:ssc/category": "source",
			"decision.api.shisho.dev:ssc/cis-benchmark/v1.0": "1.1.16",
		},
		"type": shisho.decision.as_decision_type(h.allowed),
	}
}

# METADATA
# title: "Entry of decision.api.shisho.dev/v1beta:force_push_policy"
# scope: "rule"
# description: "Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:force_push_policy"
force_push_policy_entry(report_id, allowed, subject_branch) = x {
	x := {
		"severity": 1,
		"resource_id": shisho.decision.as_resource_id(report_id),
		"data": json.marshal({"allowed": allowed, "subject_branch": subject_branch}),
	}
}

# METADATA
# title: "Entry of decision.api.shisho.dev/v1beta:force_push_policy"
# scope: "rule"
# description: |
#   Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:force_push_policy
#
#   The parameter `data` is an object with the following fields: 
#   - allowed: boolean
#   - subject_branch: string
#
#   For instance, `data` can take the following value:
#   ```rego
#   {
#     "allowed": false,
#     "subject_branch": "example",
#   }
#   ```
force_push_policy_entry_v2(report_id, edata) = x {
	x := {
		"severity": 1,
		"resource_id": shisho.decision.as_resource_id(report_id),
		"data": json.marshal(edata),
	}
}

# METADATA
# title: "decision.api.shisho.dev/v1beta:force_push_policy"
# scope: "rule"
# description: |
#   Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:force_push_policy with a specified severity.
#   Visit decision/decision.rego to see all the severities.
force_push_policy_entry_with_severity(report_id, severity, allowed, subject_branch) = x {
	x := {
		"severity": severity,
		"resource_id": shisho.decision.as_resource_id(report_id),
		"data": json.marshal({"allowed": allowed, "subject_branch": subject_branch}),
	}
}

# METADATA
# title: "decision.api.shisho.dev/v1beta:force_push_policy"
# scope: "rule"
# description: |
#   Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:force_push_policy with a specified severity.
#   Visit decision/decision.rego to see all the severities.
force_push_policy_entry_v2_with_severity(report_id, severity, edata) = x {
	x := {
		"severity": severity,
		"resource_id": shisho.decision.as_resource_id(report_id),
		"data": json.marshal(edata),
	}
}

# @title Ensure linear history is required
# You can emit this decision as follows:
# 
# ```
# import data.shisho
# 
# decisions[d] {
#   # the target of the decision (e.g. a GitHub repository, etc.)
#   subject := "test"
#
#   # whether the target is allowed by this policy or not
#   allowed := true
#
#   # See the following for further information:
#   # ja: https:/shisho.dev/docs/g/api/graphql-schema
#   # en: https:/shisho.dev/docs/ja/g/api/graphql-schema
#   policyReportId := "..."
#
#   # evidence for the decision
#   entries := [
#     shisho.decision.github.linear_history_policy_entry_v2(policyReportId, {
#       "required": false,
#       "subject_branch": "example",
#     }),
#   ]
#
#   d := shisho.decision.github.linear_history_policy({
#     "allowed": allowed
#     "subject": subject,
#     "entries": entries,
#   })
# }
# ```

# METADATA
# title: "decision.api.shisho.dev/v1beta:linear_history_policy"
# scope: "rule"
# description: |
#   Emits a decision whose type is decision.api.shisho.dev/v1beta:linear_history_policy".
linear_history_policy(d) = x {
	x := {
		"header": linear_history_policy_header({
			"allowed": d.allowed,
			"subject": d.subject,
		}),
		"entries": d.entries,
	}
}

linear_history_policy_kind = "linear_history_policy"

linear_history_policy_header(h) = x {
	x := {
		"api_version": "decision.api.shisho.dev/v1beta",
		"kind": linear_history_policy_kind,
		"subject": h.subject,
		"labels": {},
		"annotations": {
			"decision.api.shisho.dev:ssc/category": "source",
			"decision.api.shisho.dev:ssc/cis-benchmark/v1.0": "1.1.13",
		},
		"type": shisho.decision.as_decision_type(h.allowed),
	}
}

# METADATA
# title: "Entry of decision.api.shisho.dev/v1beta:linear_history_policy"
# scope: "rule"
# description: "Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:linear_history_policy"
linear_history_policy_entry(report_id, required, subject_branch) = x {
	x := {
		"severity": 0,
		"resource_id": shisho.decision.as_resource_id(report_id),
		"data": json.marshal({"required": required, "subject_branch": subject_branch}),
	}
}

# METADATA
# title: "Entry of decision.api.shisho.dev/v1beta:linear_history_policy"
# scope: "rule"
# description: |
#   Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:linear_history_policy
#
#   The parameter `data` is an object with the following fields: 
#   - required: boolean
#   - subject_branch: string
#
#   For instance, `data` can take the following value:
#   ```rego
#   {
#     "required": false,
#     "subject_branch": "example",
#   }
#   ```
linear_history_policy_entry_v2(report_id, edata) = x {
	x := {
		"severity": 0,
		"resource_id": shisho.decision.as_resource_id(report_id),
		"data": json.marshal(edata),
	}
}

# METADATA
# title: "decision.api.shisho.dev/v1beta:linear_history_policy"
# scope: "rule"
# description: |
#   Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:linear_history_policy with a specified severity.
#   Visit decision/decision.rego to see all the severities.
linear_history_policy_entry_with_severity(report_id, severity, required, subject_branch) = x {
	x := {
		"severity": severity,
		"resource_id": shisho.decision.as_resource_id(report_id),
		"data": json.marshal({"required": required, "subject_branch": subject_branch}),
	}
}

# METADATA
# title: "decision.api.shisho.dev/v1beta:linear_history_policy"
# scope: "rule"
# description: |
#   Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:linear_history_policy with a specified severity.
#   Visit decision/decision.rego to see all the severities.
linear_history_policy_entry_v2_with_severity(report_id, severity, edata) = x {
	x := {
		"severity": severity,
		"resource_id": shisho.decision.as_resource_id(report_id),
		"data": json.marshal(edata),
	}
}

# @title Ensure any change to code receives the enough number of approvals by authenticated users
# You can emit this decision as follows:
# 
# ```
# import data.shisho
# 
# decisions[d] {
#   # the target of the decision (e.g. a GitHub repository, etc.)
#   subject := "test"
#
#   # whether the target is allowed by this policy or not
#   allowed := true
#
#   # See the following for further information:
#   # ja: https:/shisho.dev/docs/g/api/graphql-schema
#   # en: https:/shisho.dev/docs/ja/g/api/graphql-schema
#   policyReportId := "..."
#
#   # evidence for the decision
#   entries := [
#     shisho.decision.github.minimum_approval_number_policy_entry_v2(policyReportId, {
#       "required_approval_count": 0,
#       "subject_branch": "example",
#     }),
#   ]
#
#   d := shisho.decision.github.minimum_approval_number_policy({
#     "allowed": allowed
#     "subject": subject,
#     "entries": entries,
#   })
# }
# ```

# METADATA
# title: "decision.api.shisho.dev/v1beta:minimum_approval_number_policy"
# scope: "rule"
# description: |
#   Emits a decision whose type is decision.api.shisho.dev/v1beta:minimum_approval_number_policy".
minimum_approval_number_policy(d) = x {
	x := {
		"header": minimum_approval_number_policy_header({
			"allowed": d.allowed,
			"subject": d.subject,
		}),
		"entries": d.entries,
	}
}

minimum_approval_number_policy_kind = "minimum_approval_number_policy"

minimum_approval_number_policy_header(h) = x {
	x := {
		"api_version": "decision.api.shisho.dev/v1beta",
		"kind": minimum_approval_number_policy_kind,
		"subject": h.subject,
		"labels": {},
		"annotations": {
			"decision.api.shisho.dev:ssc/category": "source",
			"decision.api.shisho.dev:ssc/cis-benchmark/v1.0": "1.1.3",
		},
		"type": shisho.decision.as_decision_type(h.allowed),
	}
}

# METADATA
# title: "Entry of decision.api.shisho.dev/v1beta:minimum_approval_number_policy"
# scope: "rule"
# description: "Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:minimum_approval_number_policy"
minimum_approval_number_policy_entry(report_id, required_approval_count, subject_branch) = x {
	x := {
		"severity": 2,
		"resource_id": shisho.decision.as_resource_id(report_id),
		"data": json.marshal({"required_approval_count": required_approval_count, "subject_branch": subject_branch}),
	}
}

# METADATA
# title: "Entry of decision.api.shisho.dev/v1beta:minimum_approval_number_policy"
# scope: "rule"
# description: |
#   Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:minimum_approval_number_policy
#
#   The parameter `data` is an object with the following fields: 
#   - required_approval_count: number
#   - subject_branch: string
#
#   For instance, `data` can take the following value:
#   ```rego
#   {
#     "required_approval_count": 0,
#     "subject_branch": "example",
#   }
#   ```
minimum_approval_number_policy_entry_v2(report_id, edata) = x {
	x := {
		"severity": 2,
		"resource_id": shisho.decision.as_resource_id(report_id),
		"data": json.marshal(edata),
	}
}

# METADATA
# title: "decision.api.shisho.dev/v1beta:minimum_approval_number_policy"
# scope: "rule"
# description: |
#   Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:minimum_approval_number_policy with a specified severity.
#   Visit decision/decision.rego to see all the severities.
minimum_approval_number_policy_entry_with_severity(report_id, severity, required_approval_count, subject_branch) = x {
	x := {
		"severity": severity,
		"resource_id": shisho.decision.as_resource_id(report_id),
		"data": json.marshal({"required_approval_count": required_approval_count, "subject_branch": subject_branch}),
	}
}

# METADATA
# title: "decision.api.shisho.dev/v1beta:minimum_approval_number_policy"
# scope: "rule"
# description: |
#   Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:minimum_approval_number_policy with a specified severity.
#   Visit decision/decision.rego to see all the severities.
minimum_approval_number_policy_entry_v2_with_severity(report_id, severity, edata) = x {
	x := {
		"severity": severity,
		"resource_id": shisho.decision.as_resource_id(report_id),
		"data": json.marshal(edata),
	}
}

# @title Ensure branch protection rules are enforced for administrators
# You can emit this decision as follows:
# 
# ```
# import data.shisho
# 
# decisions[d] {
#   # the target of the decision (e.g. a GitHub repository, etc.)
#   subject := "test"
#
#   # whether the target is allowed by this policy or not
#   allowed := true
#
#   # See the following for further information:
#   # ja: https:/shisho.dev/docs/g/api/graphql-schema
#   # en: https:/shisho.dev/docs/ja/g/api/graphql-schema
#   policyReportId := "..."
#
#   # evidence for the decision
#   entries := [
#     shisho.decision.github.protection_enforcement_for_admins_entry_v2(policyReportId, {
#       "allowed": false,
#       "subject_branch": "example",
#     }),
#   ]
#
#   d := shisho.decision.github.protection_enforcement_for_admins({
#     "allowed": allowed
#     "subject": subject,
#     "entries": entries,
#   })
# }
# ```

# METADATA
# title: "decision.api.shisho.dev/v1beta:protection_enforcement_for_admins"
# scope: "rule"
# description: |
#   Emits a decision whose type is decision.api.shisho.dev/v1beta:protection_enforcement_for_admins".
protection_enforcement_for_admins(d) = x {
	x := {
		"header": protection_enforcement_for_admins_header({
			"allowed": d.allowed,
			"subject": d.subject,
		}),
		"entries": d.entries,
	}
}

protection_enforcement_for_admins_kind = "protection_enforcement_for_admins"

protection_enforcement_for_admins_header(h) = x {
	x := {
		"api_version": "decision.api.shisho.dev/v1beta",
		"kind": protection_enforcement_for_admins_kind,
		"subject": h.subject,
		"labels": {},
		"annotations": {
			"decision.api.shisho.dev:ssc/category": "source",
			"decision.api.shisho.dev:ssc/cis-benchmark/v1.0": "1.1.14",
		},
		"type": shisho.decision.as_decision_type(h.allowed),
	}
}

# METADATA
# title: "Entry of decision.api.shisho.dev/v1beta:protection_enforcement_for_admins"
# scope: "rule"
# description: "Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:protection_enforcement_for_admins"
protection_enforcement_for_admins_entry(report_id, allowed, subject_branch) = x {
	x := {
		"severity": 1,
		"resource_id": shisho.decision.as_resource_id(report_id),
		"data": json.marshal({"allowed": allowed, "subject_branch": subject_branch}),
	}
}

# METADATA
# title: "Entry of decision.api.shisho.dev/v1beta:protection_enforcement_for_admins"
# scope: "rule"
# description: |
#   Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:protection_enforcement_for_admins
#
#   The parameter `data` is an object with the following fields: 
#   - allowed: boolean
#   - subject_branch: string
#
#   For instance, `data` can take the following value:
#   ```rego
#   {
#     "allowed": false,
#     "subject_branch": "example",
#   }
#   ```
protection_enforcement_for_admins_entry_v2(report_id, edata) = x {
	x := {
		"severity": 1,
		"resource_id": shisho.decision.as_resource_id(report_id),
		"data": json.marshal(edata),
	}
}

# METADATA
# title: "decision.api.shisho.dev/v1beta:protection_enforcement_for_admins"
# scope: "rule"
# description: |
#   Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:protection_enforcement_for_admins with a specified severity.
#   Visit decision/decision.rego to see all the severities.
protection_enforcement_for_admins_entry_with_severity(report_id, severity, allowed, subject_branch) = x {
	x := {
		"severity": severity,
		"resource_id": shisho.decision.as_resource_id(report_id),
		"data": json.marshal({"allowed": allowed, "subject_branch": subject_branch}),
	}
}

# METADATA
# title: "decision.api.shisho.dev/v1beta:protection_enforcement_for_admins"
# scope: "rule"
# description: |
#   Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:protection_enforcement_for_admins with a specified severity.
#   Visit decision/decision.rego to see all the severities.
protection_enforcement_for_admins_entry_v2_with_severity(report_id, severity, edata) = x {
	x := {
		"severity": severity,
		"resource_id": shisho.decision.as_resource_id(report_id),
		"data": json.marshal(edata),
	}
}

# @title Ensure minimum number of administrators are set for the GitHub repository
# You can emit this decision as follows:
# 
# ```
# import data.shisho
# 
# decisions[d] {
#   # the target of the decision (e.g. a GitHub repository, etc.)
#   subject := "test"
#
#   # whether the target is allowed by this policy or not
#   allowed := true
#
#   # See the following for further information:
#   # ja: https:/shisho.dev/docs/g/api/graphql-schema
#   # en: https:/shisho.dev/docs/ja/g/api/graphql-schema
#   policyReportId := "..."
#
#   # evidence for the decision
#   entries := [
#     shisho.decision.github.repo_admins_entry_v2(policyReportId, {
#       "admins": ["example"],
#     }),
#   ]
#
#   d := shisho.decision.github.repo_admins({
#     "allowed": allowed
#     "subject": subject,
#     "entries": entries,
#   })
# }
# ```

# METADATA
# title: "decision.api.shisho.dev/v1beta:repo_admins"
# scope: "rule"
# description: |
#   Emits a decision whose type is decision.api.shisho.dev/v1beta:repo_admins".
repo_admins(d) = x {
	x := {
		"header": repo_admins_header({
			"allowed": d.allowed,
			"subject": d.subject,
		}),
		"entries": d.entries,
	}
}

repo_admins_kind = "repo_admins"

repo_admins_header(h) = x {
	x := {
		"api_version": "decision.api.shisho.dev/v1beta",
		"kind": repo_admins_kind,
		"subject": h.subject,
		"labels": {},
		"annotations": {
			"decision.api.shisho.dev:ssc/category": "common",
			"decision.api.shisho.dev:ssc/cis-benchmark/v1.0": "1.3.7",
		},
		"type": shisho.decision.as_decision_type(h.allowed),
	}
}

# METADATA
# title: "Entry of decision.api.shisho.dev/v1beta:repo_admins"
# scope: "rule"
# description: "Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:repo_admins"
repo_admins_entry(report_id, admins) = x {
	x := {
		"severity": 1,
		"resource_id": shisho.decision.as_resource_id(report_id),
		"data": json.marshal({"admins": admins}),
	}
}

# METADATA
# title: "Entry of decision.api.shisho.dev/v1beta:repo_admins"
# scope: "rule"
# description: |
#   Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:repo_admins
#
#   The parameter `data` is an object with the following fields: 
#   - admins: string
#
#   For instance, `data` can take the following value:
#   ```rego
#   {
#     "admins": ["example"],
#   }
#   ```
repo_admins_entry_v2(report_id, edata) = x {
	x := {
		"severity": 1,
		"resource_id": shisho.decision.as_resource_id(report_id),
		"data": json.marshal(edata),
	}
}

# METADATA
# title: "decision.api.shisho.dev/v1beta:repo_admins"
# scope: "rule"
# description: |
#   Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:repo_admins with a specified severity.
#   Visit decision/decision.rego to see all the severities.
repo_admins_entry_with_severity(report_id, severity, admins) = x {
	x := {
		"severity": severity,
		"resource_id": shisho.decision.as_resource_id(report_id),
		"data": json.marshal({"admins": admins}),
	}
}

# METADATA
# title: "decision.api.shisho.dev/v1beta:repo_admins"
# scope: "rule"
# description: |
#   Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:repo_admins with a specified severity.
#   Visit decision/decision.rego to see all the severities.
repo_admins_entry_v2_with_severity(report_id, severity, edata) = x {
	x := {
		"severity": severity,
		"resource_id": shisho.decision.as_resource_id(report_id),
		"data": json.marshal(edata),
	}
}

# @title Ensure deletion of GitHub repositories is restricted
# You can emit this decision as follows:
# 
# ```
# import data.shisho
# 
# decisions[d] {
#   # the target of the decision (e.g. a GitHub repository, etc.)
#   subject := "test"
#
#   # whether the target is allowed by this policy or not
#   allowed := true
#
#   # See the following for further information:
#   # ja: https:/shisho.dev/docs/g/api/graphql-schema
#   # en: https:/shisho.dev/docs/ja/g/api/graphql-schema
#   policyReportId := "..."
#
#   # evidence for the decision
#   entries := [
#     shisho.decision.github.repo_members_permission_on_deleting_repository_entry_v2(policyReportId, {
#       "allowed_users": ["example"],
#     }),
#   ]
#
#   d := shisho.decision.github.repo_members_permission_on_deleting_repository({
#     "allowed": allowed
#     "subject": subject,
#     "entries": entries,
#   })
# }
# ```

# METADATA
# title: "decision.api.shisho.dev/v1beta:repo_members_permission_on_deleting_repository"
# scope: "rule"
# description: |
#   Emits a decision whose type is decision.api.shisho.dev/v1beta:repo_members_permission_on_deleting_repository".
repo_members_permission_on_deleting_repository(d) = x {
	x := {
		"header": repo_members_permission_on_deleting_repository_header({
			"allowed": d.allowed,
			"subject": d.subject,
		}),
		"entries": d.entries,
	}
}

repo_members_permission_on_deleting_repository_kind = "repo_members_permission_on_deleting_repository"

repo_members_permission_on_deleting_repository_header(h) = x {
	x := {
		"api_version": "decision.api.shisho.dev/v1beta",
		"kind": repo_members_permission_on_deleting_repository_kind,
		"subject": h.subject,
		"labels": {},
		"annotations": {
			"decision.api.shisho.dev:ssc/category": "source",
			"decision.api.shisho.dev:ssc/cis-benchmark/v1.0": "1.2.3",
		},
		"type": shisho.decision.as_decision_type(h.allowed),
	}
}

# METADATA
# title: "Entry of decision.api.shisho.dev/v1beta:repo_members_permission_on_deleting_repository"
# scope: "rule"
# description: "Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:repo_members_permission_on_deleting_repository"
repo_members_permission_on_deleting_repository_entry(report_id, allowed_users) = x {
	x := {
		"severity": 1,
		"resource_id": shisho.decision.as_resource_id(report_id),
		"data": json.marshal({"allowed_users": allowed_users}),
	}
}

# METADATA
# title: "Entry of decision.api.shisho.dev/v1beta:repo_members_permission_on_deleting_repository"
# scope: "rule"
# description: |
#   Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:repo_members_permission_on_deleting_repository
#
#   The parameter `data` is an object with the following fields: 
#   - allowed_users: string
#
#   For instance, `data` can take the following value:
#   ```rego
#   {
#     "allowed_users": ["example"],
#   }
#   ```
repo_members_permission_on_deleting_repository_entry_v2(report_id, edata) = x {
	x := {
		"severity": 1,
		"resource_id": shisho.decision.as_resource_id(report_id),
		"data": json.marshal(edata),
	}
}

# METADATA
# title: "decision.api.shisho.dev/v1beta:repo_members_permission_on_deleting_repository"
# scope: "rule"
# description: |
#   Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:repo_members_permission_on_deleting_repository with a specified severity.
#   Visit decision/decision.rego to see all the severities.
repo_members_permission_on_deleting_repository_entry_with_severity(report_id, severity, allowed_users) = x {
	x := {
		"severity": severity,
		"resource_id": shisho.decision.as_resource_id(report_id),
		"data": json.marshal({"allowed_users": allowed_users}),
	}
}

# METADATA
# title: "decision.api.shisho.dev/v1beta:repo_members_permission_on_deleting_repository"
# scope: "rule"
# description: |
#   Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:repo_members_permission_on_deleting_repository with a specified severity.
#   Visit decision/decision.rego to see all the severities.
repo_members_permission_on_deleting_repository_entry_v2_with_severity(report_id, severity, edata) = x {
	x := {
		"severity": severity,
		"resource_id": shisho.decision.as_resource_id(report_id),
		"data": json.marshal(edata),
	}
}

# @title Ensure previous approvals are dismissed when updates are introduced to a code change proposal
# You can emit this decision as follows:
# 
# ```
# import data.shisho
# 
# decisions[d] {
#   # the target of the decision (e.g. a GitHub repository, etc.)
#   subject := "test"
#
#   # whether the target is allowed by this policy or not
#   allowed := true
#
#   # See the following for further information:
#   # ja: https:/shisho.dev/docs/g/api/graphql-schema
#   # en: https:/shisho.dev/docs/ja/g/api/graphql-schema
#   policyReportId := "..."
#
#   # evidence for the decision
#   entries := [
#     shisho.decision.github.stale_review_policy_entry_v2(policyReportId, {
#       "enforced": false,
#       "subject_branch": "example",
#     }),
#   ]
#
#   d := shisho.decision.github.stale_review_policy({
#     "allowed": allowed
#     "subject": subject,
#     "entries": entries,
#   })
# }
# ```

# METADATA
# title: "decision.api.shisho.dev/v1beta:stale_review_policy"
# scope: "rule"
# description: |
#   Emits a decision whose type is decision.api.shisho.dev/v1beta:stale_review_policy".
stale_review_policy(d) = x {
	x := {
		"header": stale_review_policy_header({
			"allowed": d.allowed,
			"subject": d.subject,
		}),
		"entries": d.entries,
	}
}

stale_review_policy_kind = "stale_review_policy"

stale_review_policy_header(h) = x {
	x := {
		"api_version": "decision.api.shisho.dev/v1beta",
		"kind": stale_review_policy_kind,
		"subject": h.subject,
		"labels": {},
		"annotations": {
			"decision.api.shisho.dev:ssc/category": "source",
			"decision.api.shisho.dev:ssc/cis-benchmark/v1.0": "1.1.4",
		},
		"type": shisho.decision.as_decision_type(h.allowed),
	}
}

# METADATA
# title: "Entry of decision.api.shisho.dev/v1beta:stale_review_policy"
# scope: "rule"
# description: "Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:stale_review_policy"
stale_review_policy_entry(report_id, enforced, subject_branch) = x {
	x := {
		"severity": 1,
		"resource_id": shisho.decision.as_resource_id(report_id),
		"data": json.marshal({"enforced": enforced, "subject_branch": subject_branch}),
	}
}

# METADATA
# title: "Entry of decision.api.shisho.dev/v1beta:stale_review_policy"
# scope: "rule"
# description: |
#   Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:stale_review_policy
#
#   The parameter `data` is an object with the following fields: 
#   - enforced: boolean
#   - subject_branch: string
#
#   For instance, `data` can take the following value:
#   ```rego
#   {
#     "enforced": false,
#     "subject_branch": "example",
#   }
#   ```
stale_review_policy_entry_v2(report_id, edata) = x {
	x := {
		"severity": 1,
		"resource_id": shisho.decision.as_resource_id(report_id),
		"data": json.marshal(edata),
	}
}

# METADATA
# title: "decision.api.shisho.dev/v1beta:stale_review_policy"
# scope: "rule"
# description: |
#   Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:stale_review_policy with a specified severity.
#   Visit decision/decision.rego to see all the severities.
stale_review_policy_entry_with_severity(report_id, severity, enforced, subject_branch) = x {
	x := {
		"severity": severity,
		"resource_id": shisho.decision.as_resource_id(report_id),
		"data": json.marshal({"enforced": enforced, "subject_branch": subject_branch}),
	}
}

# METADATA
# title: "decision.api.shisho.dev/v1beta:stale_review_policy"
# scope: "rule"
# description: |
#   Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:stale_review_policy with a specified severity.
#   Visit decision/decision.rego to see all the severities.
stale_review_policy_entry_v2_with_severity(report_id, severity, edata) = x {
	x := {
		"severity": severity,
		"resource_id": shisho.decision.as_resource_id(report_id),
		"data": json.marshal(edata),
	}
}

# - This code was generated by Shisho Cloud's internal system (protoc-gen-regolib).
# - When you find something to improve, you can create an GitHub issue, instead of creating pull requests.

package shisho.decision.googlecloud.compute

import data.shisho

# @title Ensure critical Compute Engine disks use Customer-Supplied Encryption Keys (CSEK)
# You can emit this decision as follows:
# 
# ```
# import data.shisho
# 
# decisions[d] {
#   # the resource ID to review (e.g. a GitHub repository, etc.)
#   subject := "test"
#
#   # whether the target is allowed by this policy or not
#   allowed := true
#
#   d := shisho.decision.googlecloud.compute.disk_encryption_key({
#     "allowed": allowed,
#     "subject": subject,
#     "payload": shisho.decision.googlecloud.compute.disk_encryption_key_payload({
#       "keys": {"target_disk": "example", "key_name": "example", "encryption_key_type": ENCRYPTION_KEY_TYPE_ENCRYPTION_KEY_TYPE_UNKNOWN},
#     }),
#   })
# }
# ```

# METADATA
# title: "decision.api.shisho.dev/v1beta:googlecloud_compute_disk_encryption_key"
# scope: "rule"
# description: |
#   Emits a decision whose type is decision.api.shisho.dev/v1beta:googlecloud_compute_disk_encryption_key".
disk_encryption_key(d) = x {
	x := {
		"header": disk_encryption_key_header({
			"allowed": d.allowed,
			"subject": d.subject,
			"locator": disk_encryption_key_locator(d),
			"severity": disk_encryption_key_severity(d),
		}),
		"payload": d.payload,
	}
}

disk_encryption_key_severity(d) := shisho.decision.severity_info {
	d.allowed == true
} else := d.severity {
	not is_null(d.severity)
} else := 0

disk_encryption_key_locator(d) := d.locator {
	not is_null(d.locator)
} else := ""

disk_encryption_key_kind = "googlecloud_compute_disk_encryption_key"

disk_encryption_key_header(h) = x {
	x := {
		"api_version": "decision.api.shisho.dev/v1beta",
		"kind": disk_encryption_key_kind,
		"subject": h.subject,
		"locator": h.locator,
		"severity": h.severity,
		"labels": {},
		"annotations": {
			"decision.api.shisho.dev:googlecloud/cis-benchmark/v1.3.0": "4.7",
			"decision.api.shisho.dev:needs-manual-review": "false",
			"decision.api.shisho.dev:ssc/category": "infrastructure",
		},
		"type": shisho.decision.as_decision_type(disk_encryption_key_allowed(h)),
	}
}

# Force to allow the given decision following resource exception policy
disk_encryption_key_allowed(h) {
	data.params != null
	data.params.resource_exceptions != null
	shisho.resource.is_excepted(data.params.resource_exceptions, h.subject)
} else := h.allowed

# METADATA
# title: "Entry of decision.api.shisho.dev/v1beta:googlecloud_compute_disk_encryption_key"
# scope: "rule"
# description: |
#   Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:googlecloud_compute_disk_encryption_key
#
#   The parameter `data` is an object with the following fields: 
#   - keys: {"target_disk": string, "key_name": string, "encryption_key_type": encryption_key_type}
#
#   For instance, `data` can take the following value:
#   ```rego
#   {
#     "keys": {"target_disk": "example", "key_name": "example", "encryption_key_type": ENCRYPTION_KEY_TYPE_ENCRYPTION_KEY_TYPE_UNKNOWN},
#   }
#   ```
disk_encryption_key_payload(edata) = x {
	x := json.marshal(edata)
}

# @title Ensure IP forwarding is disabled for Compute Engine instances
# You can emit this decision as follows:
# 
# ```
# import data.shisho
# 
# decisions[d] {
#   # the resource ID to review (e.g. a GitHub repository, etc.)
#   subject := "test"
#
#   # whether the target is allowed by this policy or not
#   allowed := true
#
#   d := shisho.decision.googlecloud.compute.instance_ip_forwarding({
#     "allowed": allowed,
#     "subject": subject,
#     "payload": shisho.decision.googlecloud.compute.instance_ip_forwarding_payload({
#       "forwarding_enabled": false,
#     }),
#   })
# }
# ```

# METADATA
# title: "decision.api.shisho.dev/v1beta:googlecloud_compute_instance_ip_forwarding"
# scope: "rule"
# description: |
#   Emits a decision whose type is decision.api.shisho.dev/v1beta:googlecloud_compute_instance_ip_forwarding".
instance_ip_forwarding(d) = x {
	x := {
		"header": instance_ip_forwarding_header({
			"allowed": d.allowed,
			"subject": d.subject,
			"locator": instance_ip_forwarding_locator(d),
			"severity": instance_ip_forwarding_severity(d),
		}),
		"payload": d.payload,
	}
}

instance_ip_forwarding_severity(d) := shisho.decision.severity_info {
	d.allowed == true
} else := d.severity {
	not is_null(d.severity)
} else := 3

instance_ip_forwarding_locator(d) := d.locator {
	not is_null(d.locator)
} else := ""

instance_ip_forwarding_kind = "googlecloud_compute_instance_ip_forwarding"

instance_ip_forwarding_header(h) = x {
	x := {
		"api_version": "decision.api.shisho.dev/v1beta",
		"kind": instance_ip_forwarding_kind,
		"subject": h.subject,
		"locator": h.locator,
		"severity": h.severity,
		"labels": {},
		"annotations": {
			"decision.api.shisho.dev:googlecloud/cis-benchmark/v1.3.0": "4.6",
			"decision.api.shisho.dev:needs-manual-review": "true",
			"decision.api.shisho.dev:ssc/category": "infrastructure",
		},
		"type": shisho.decision.as_decision_type(instance_ip_forwarding_allowed(h)),
	}
}

# Force to allow the given decision following resource exception policy
instance_ip_forwarding_allowed(h) {
	data.params != null
	data.params.resource_exceptions != null
	shisho.resource.is_excepted(data.params.resource_exceptions, h.subject)
} else := h.allowed

# METADATA
# title: "Entry of decision.api.shisho.dev/v1beta:googlecloud_compute_instance_ip_forwarding"
# scope: "rule"
# description: |
#   Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:googlecloud_compute_instance_ip_forwarding
#
#   The parameter `data` is an object with the following fields: 
#   - forwarding_enabled: boolean
#
#   For instance, `data` can take the following value:
#   ```rego
#   {
#     "forwarding_enabled": false,
#   }
#   ```
instance_ip_forwarding_payload(edata) = x {
	x := json.marshal(edata)
}

# @title Ensure that Compute Engine instances use appropriate OAuth2 scopes for Google APIs
# You can emit this decision as follows:
# 
# ```
# import data.shisho
# 
# decisions[d] {
#   # the resource ID to review (e.g. a GitHub repository, etc.)
#   subject := "test"
#
#   # whether the target is allowed by this policy or not
#   allowed := true
#
#   d := shisho.decision.googlecloud.compute.instance_oauth2_scope({
#     "allowed": allowed,
#     "subject": subject,
#     "payload": shisho.decision.googlecloud.compute.instance_oauth2_scope_payload({
#       "assigned_scopes": ["example"],
#       "service_account_email": "example",
#     }),
#   })
# }
# ```

# METADATA
# title: "decision.api.shisho.dev/v1beta:googlecloud_compute_instance_oauth2_scope"
# scope: "rule"
# description: |
#   Emits a decision whose type is decision.api.shisho.dev/v1beta:googlecloud_compute_instance_oauth2_scope".
instance_oauth2_scope(d) = x {
	x := {
		"header": instance_oauth2_scope_header({
			"allowed": d.allowed,
			"subject": d.subject,
			"locator": instance_oauth2_scope_locator(d),
			"severity": instance_oauth2_scope_severity(d),
		}),
		"payload": d.payload,
	}
}

instance_oauth2_scope_severity(d) := shisho.decision.severity_info {
	d.allowed == true
} else := d.severity {
	not is_null(d.severity)
} else := 0

instance_oauth2_scope_locator(d) := d.locator {
	not is_null(d.locator)
} else := ""

instance_oauth2_scope_kind = "googlecloud_compute_instance_oauth2_scope"

instance_oauth2_scope_header(h) = x {
	x := {
		"api_version": "decision.api.shisho.dev/v1beta",
		"kind": instance_oauth2_scope_kind,
		"subject": h.subject,
		"locator": h.locator,
		"severity": h.severity,
		"labels": {},
		"annotations": {
			"decision.api.shisho.dev:googlecloud/cis-benchmark/v1.3.0": "4.2",
			"decision.api.shisho.dev:ssc/category": "infrastructure",
		},
		"type": shisho.decision.as_decision_type(instance_oauth2_scope_allowed(h)),
	}
}

# Force to allow the given decision following resource exception policy
instance_oauth2_scope_allowed(h) {
	data.params != null
	data.params.resource_exceptions != null
	shisho.resource.is_excepted(data.params.resource_exceptions, h.subject)
} else := h.allowed

# METADATA
# title: "Entry of decision.api.shisho.dev/v1beta:googlecloud_compute_instance_oauth2_scope"
# scope: "rule"
# description: |
#   Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:googlecloud_compute_instance_oauth2_scope
#
#   The parameter `data` is an object with the following fields: 
#   - assigned_scopes: string
#   - service_account_email: string
#
#   For instance, `data` can take the following value:
#   ```rego
#   {
#     "assigned_scopes": ["example"],
#     "service_account_email": "example",
#   }
#   ```
instance_oauth2_scope_payload(edata) = x {
	x := json.marshal(edata)
}

# @title Ensure OS Login is enabled for a project
# You can emit this decision as follows:
# 
# ```
# import data.shisho
# 
# decisions[d] {
#   # the resource ID to review (e.g. a GitHub repository, etc.)
#   subject := "test"
#
#   # whether the target is allowed by this policy or not
#   allowed := true
#
#   d := shisho.decision.googlecloud.compute.instance_oslogin({
#     "allowed": allowed,
#     "subject": subject,
#     "payload": shisho.decision.googlecloud.compute.instance_oslogin_payload({
#       "oslogin_enabled": false,
#     }),
#   })
# }
# ```

# METADATA
# title: "decision.api.shisho.dev/v1beta:googlecloud_compute_instance_oslogin"
# scope: "rule"
# description: |
#   Emits a decision whose type is decision.api.shisho.dev/v1beta:googlecloud_compute_instance_oslogin".
instance_oslogin(d) = x {
	x := {
		"header": instance_oslogin_header({
			"allowed": d.allowed,
			"subject": d.subject,
			"locator": instance_oslogin_locator(d),
			"severity": instance_oslogin_severity(d),
		}),
		"payload": d.payload,
	}
}

instance_oslogin_severity(d) := shisho.decision.severity_info {
	d.allowed == true
} else := d.severity {
	not is_null(d.severity)
} else := 2

instance_oslogin_locator(d) := d.locator {
	not is_null(d.locator)
} else := ""

instance_oslogin_kind = "googlecloud_compute_instance_oslogin"

instance_oslogin_header(h) = x {
	x := {
		"api_version": "decision.api.shisho.dev/v1beta",
		"kind": instance_oslogin_kind,
		"subject": h.subject,
		"locator": h.locator,
		"severity": h.severity,
		"labels": {},
		"annotations": {
			"decision.api.shisho.dev:googlecloud/cis-benchmark/v1.3.0": "4.4",
			"decision.api.shisho.dev:needs-manual-review": "false",
			"decision.api.shisho.dev:ssc/category": "infrastructure",
		},
		"type": shisho.decision.as_decision_type(instance_oslogin_allowed(h)),
	}
}

# Force to allow the given decision following resource exception policy
instance_oslogin_allowed(h) {
	data.params != null
	data.params.resource_exceptions != null
	shisho.resource.is_excepted(data.params.resource_exceptions, h.subject)
} else := h.allowed

# METADATA
# title: "Entry of decision.api.shisho.dev/v1beta:googlecloud_compute_instance_oslogin"
# scope: "rule"
# description: |
#   Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:googlecloud_compute_instance_oslogin
#
#   The parameter `data` is an object with the following fields: 
#   - oslogin_enabled: boolean
#
#   For instance, `data` can take the following value:
#   ```rego
#   {
#     "oslogin_enabled": false,
#   }
#   ```
instance_oslogin_payload(edata) = x {
	x := json.marshal(edata)
}

# @title Ensure Compute Engine instances block project-wide SSH keys
# You can emit this decision as follows:
# 
# ```
# import data.shisho
# 
# decisions[d] {
#   # the resource ID to review (e.g. a GitHub repository, etc.)
#   subject := "test"
#
#   # whether the target is allowed by this policy or not
#   allowed := true
#
#   d := shisho.decision.googlecloud.compute.instance_project_wide_key_management({
#     "allowed": allowed,
#     "subject": subject,
#     "payload": shisho.decision.googlecloud.compute.instance_project_wide_key_management_payload({
#       "blocked": false,
#       "project_wide_key_available": false,
#     }),
#   })
# }
# ```

# METADATA
# title: "decision.api.shisho.dev/v1beta:googlecloud_compute_instance_project_wide_key_management"
# scope: "rule"
# description: |
#   Emits a decision whose type is decision.api.shisho.dev/v1beta:googlecloud_compute_instance_project_wide_key_management".
instance_project_wide_key_management(d) = x {
	x := {
		"header": instance_project_wide_key_management_header({
			"allowed": d.allowed,
			"subject": d.subject,
			"locator": instance_project_wide_key_management_locator(d),
			"severity": instance_project_wide_key_management_severity(d),
		}),
		"payload": d.payload,
	}
}

instance_project_wide_key_management_severity(d) := shisho.decision.severity_info {
	d.allowed == true
} else := d.severity {
	not is_null(d.severity)
} else := 1

instance_project_wide_key_management_locator(d) := d.locator {
	not is_null(d.locator)
} else := ""

instance_project_wide_key_management_kind = "googlecloud_compute_instance_project_wide_key_management"

instance_project_wide_key_management_header(h) = x {
	x := {
		"api_version": "decision.api.shisho.dev/v1beta",
		"kind": instance_project_wide_key_management_kind,
		"subject": h.subject,
		"locator": h.locator,
		"severity": h.severity,
		"labels": {},
		"annotations": {
			"decision.api.shisho.dev:googlecloud/cis-benchmark/v1.3.0": "4.3",
			"decision.api.shisho.dev:needs-manual-review": "false",
			"decision.api.shisho.dev:ssc/category": "infrastructure",
		},
		"type": shisho.decision.as_decision_type(instance_project_wide_key_management_allowed(h)),
	}
}

# Force to allow the given decision following resource exception policy
instance_project_wide_key_management_allowed(h) {
	data.params != null
	data.params.resource_exceptions != null
	shisho.resource.is_excepted(data.params.resource_exceptions, h.subject)
} else := h.allowed

# METADATA
# title: "Entry of decision.api.shisho.dev/v1beta:googlecloud_compute_instance_project_wide_key_management"
# scope: "rule"
# description: |
#   Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:googlecloud_compute_instance_project_wide_key_management
#
#   The parameter `data` is an object with the following fields: 
#   - blocked: boolean
#   - project_wide_key_available: boolean
#
#   For instance, `data` can take the following value:
#   ```rego
#   {
#     "blocked": false,
#     "project_wide_key_available": false,
#   }
#   ```
instance_project_wide_key_management_payload(edata) = x {
	x := json.marshal(edata)
}

# @title Ensure Compute Engine instances have only necessary public IP addresses
# You can emit this decision as follows:
# 
# ```
# import data.shisho
# 
# decisions[d] {
#   # the resource ID to review (e.g. a GitHub repository, etc.)
#   subject := "test"
#
#   # whether the target is allowed by this policy or not
#   allowed := true
#
#   d := shisho.decision.googlecloud.compute.instance_public_ip({
#     "allowed": allowed,
#     "subject": subject,
#     "payload": shisho.decision.googlecloud.compute.instance_public_ip_payload({
#       "public_ipv4_addresses": ["example"],
#       "public_ipv6_addresses": ["example"],
#     }),
#   })
# }
# ```

# METADATA
# title: "decision.api.shisho.dev/v1beta:googlecloud_compute_instance_public_ip"
# scope: "rule"
# description: |
#   Emits a decision whose type is decision.api.shisho.dev/v1beta:googlecloud_compute_instance_public_ip".
instance_public_ip(d) = x {
	x := {
		"header": instance_public_ip_header({
			"allowed": d.allowed,
			"subject": d.subject,
			"locator": instance_public_ip_locator(d),
			"severity": instance_public_ip_severity(d),
		}),
		"payload": d.payload,
	}
}

instance_public_ip_severity(d) := shisho.decision.severity_info {
	d.allowed == true
} else := d.severity {
	not is_null(d.severity)
} else := 2

instance_public_ip_locator(d) := d.locator {
	not is_null(d.locator)
} else := ""

instance_public_ip_kind = "googlecloud_compute_instance_public_ip"

instance_public_ip_header(h) = x {
	x := {
		"api_version": "decision.api.shisho.dev/v1beta",
		"kind": instance_public_ip_kind,
		"subject": h.subject,
		"locator": h.locator,
		"severity": h.severity,
		"labels": {},
		"annotations": {
			"decision.api.shisho.dev:googlecloud/cis-benchmark/v1.3.0": "4.9",
			"decision.api.shisho.dev:needs-manual-review": "true",
			"decision.api.shisho.dev:ssc/category": "infrastructure",
		},
		"type": shisho.decision.as_decision_type(instance_public_ip_allowed(h)),
	}
}

# Force to allow the given decision following resource exception policy
instance_public_ip_allowed(h) {
	data.params != null
	data.params.resource_exceptions != null
	shisho.resource.is_excepted(data.params.resource_exceptions, h.subject)
} else := h.allowed

# METADATA
# title: "Entry of decision.api.shisho.dev/v1beta:googlecloud_compute_instance_public_ip"
# scope: "rule"
# description: |
#   Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:googlecloud_compute_instance_public_ip
#
#   The parameter `data` is an object with the following fields: 
#   - public_ipv4_addresses: string
#   - public_ipv6_addresses: string
#
#   For instance, `data` can take the following value:
#   ```rego
#   {
#     "public_ipv4_addresses": ["example"],
#     "public_ipv6_addresses": ["example"],
#   }
#   ```
instance_public_ip_payload(edata) = x {
	x := json.marshal(edata)
}

# @title Ensure connections to serial ports are disabled for Compute Engine instances
# You can emit this decision as follows:
# 
# ```
# import data.shisho
# 
# decisions[d] {
#   # the resource ID to review (e.g. a GitHub repository, etc.)
#   subject := "test"
#
#   # whether the target is allowed by this policy or not
#   allowed := true
#
#   d := shisho.decision.googlecloud.compute.instance_serial_port({
#     "allowed": allowed,
#     "subject": subject,
#     "payload": shisho.decision.googlecloud.compute.instance_serial_port_payload({
#       "serial_port_enabled": false,
#     }),
#   })
# }
# ```

# METADATA
# title: "decision.api.shisho.dev/v1beta:googlecloud_compute_instance_serial_port"
# scope: "rule"
# description: |
#   Emits a decision whose type is decision.api.shisho.dev/v1beta:googlecloud_compute_instance_serial_port".
instance_serial_port(d) = x {
	x := {
		"header": instance_serial_port_header({
			"allowed": d.allowed,
			"subject": d.subject,
			"locator": instance_serial_port_locator(d),
			"severity": instance_serial_port_severity(d),
		}),
		"payload": d.payload,
	}
}

instance_serial_port_severity(d) := shisho.decision.severity_info {
	d.allowed == true
} else := d.severity {
	not is_null(d.severity)
} else := 2

instance_serial_port_locator(d) := d.locator {
	not is_null(d.locator)
} else := ""

instance_serial_port_kind = "googlecloud_compute_instance_serial_port"

instance_serial_port_header(h) = x {
	x := {
		"api_version": "decision.api.shisho.dev/v1beta",
		"kind": instance_serial_port_kind,
		"subject": h.subject,
		"locator": h.locator,
		"severity": h.severity,
		"labels": {},
		"annotations": {
			"decision.api.shisho.dev:googlecloud/cis-benchmark/v1.3.0": "4.5",
			"decision.api.shisho.dev:needs-manual-review": "false",
			"decision.api.shisho.dev:ssc/category": "infrastructure",
		},
		"type": shisho.decision.as_decision_type(instance_serial_port_allowed(h)),
	}
}

# Force to allow the given decision following resource exception policy
instance_serial_port_allowed(h) {
	data.params != null
	data.params.resource_exceptions != null
	shisho.resource.is_excepted(data.params.resource_exceptions, h.subject)
} else := h.allowed

# METADATA
# title: "Entry of decision.api.shisho.dev/v1beta:googlecloud_compute_instance_serial_port"
# scope: "rule"
# description: |
#   Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:googlecloud_compute_instance_serial_port
#
#   The parameter `data` is an object with the following fields: 
#   - serial_port_enabled: boolean
#
#   For instance, `data` can take the following value:
#   ```rego
#   {
#     "serial_port_enabled": false,
#   }
#   ```
instance_serial_port_payload(edata) = x {
	x := json.marshal(edata)
}

# @title Ensure that Compute Engine instances do not use default service accounts
# You can emit this decision as follows:
# 
# ```
# import data.shisho
# 
# decisions[d] {
#   # the resource ID to review (e.g. a GitHub repository, etc.)
#   subject := "test"
#
#   # whether the target is allowed by this policy or not
#   allowed := true
#
#   d := shisho.decision.googlecloud.compute.instance_service_account({
#     "allowed": allowed,
#     "subject": subject,
#     "payload": shisho.decision.googlecloud.compute.instance_service_account_payload({
#       "service_account_email": "example",
#       "uses_default_account": false,
#     }),
#   })
# }
# ```

# METADATA
# title: "decision.api.shisho.dev/v1beta:googlecloud_compute_instance_service_account"
# scope: "rule"
# description: |
#   Emits a decision whose type is decision.api.shisho.dev/v1beta:googlecloud_compute_instance_service_account".
instance_service_account(d) = x {
	x := {
		"header": instance_service_account_header({
			"allowed": d.allowed,
			"subject": d.subject,
			"locator": instance_service_account_locator(d),
			"severity": instance_service_account_severity(d),
		}),
		"payload": d.payload,
	}
}

instance_service_account_severity(d) := shisho.decision.severity_info {
	d.allowed == true
} else := d.severity {
	not is_null(d.severity)
} else := 2

instance_service_account_locator(d) := d.locator {
	not is_null(d.locator)
} else := ""

instance_service_account_kind = "googlecloud_compute_instance_service_account"

instance_service_account_header(h) = x {
	x := {
		"api_version": "decision.api.shisho.dev/v1beta",
		"kind": instance_service_account_kind,
		"subject": h.subject,
		"locator": h.locator,
		"severity": h.severity,
		"labels": {},
		"annotations": {
			"decision.api.shisho.dev:googlecloud/cis-benchmark/v1.3.0": "4.1",
			"decision.api.shisho.dev:ssc/category": "infrastructure",
		},
		"type": shisho.decision.as_decision_type(instance_service_account_allowed(h)),
	}
}

# Force to allow the given decision following resource exception policy
instance_service_account_allowed(h) {
	data.params != null
	data.params.resource_exceptions != null
	shisho.resource.is_excepted(data.params.resource_exceptions, h.subject)
} else := h.allowed

# METADATA
# title: "Entry of decision.api.shisho.dev/v1beta:googlecloud_compute_instance_service_account"
# scope: "rule"
# description: |
#   Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:googlecloud_compute_instance_service_account
#
#   The parameter `data` is an object with the following fields: 
#   - service_account_email: string
#   - uses_default_account: boolean
#
#   For instance, `data` can take the following value:
#   ```rego
#   {
#     "service_account_email": "example",
#     "uses_default_account": false,
#   }
#   ```
instance_service_account_payload(edata) = x {
	x := json.marshal(edata)
}

# @title Ensure Compute Engine instances enable Shielded VM features
# You can emit this decision as follows:
# 
# ```
# import data.shisho
# 
# decisions[d] {
#   # the resource ID to review (e.g. a GitHub repository, etc.)
#   subject := "test"
#
#   # whether the target is allowed by this policy or not
#   allowed := true
#
#   d := shisho.decision.googlecloud.compute.instance_shielded_vm({
#     "allowed": allowed,
#     "subject": subject,
#     "payload": shisho.decision.googlecloud.compute.instance_shielded_vm_payload({
#       "integrity_monitoring_enabled": false,
#       "secure_boot_enabled": false,
#       "vtpm_enabled": false,
#     }),
#   })
# }
# ```

# METADATA
# title: "decision.api.shisho.dev/v1beta:googlecloud_compute_instance_shielded_vm"
# scope: "rule"
# description: |
#   Emits a decision whose type is decision.api.shisho.dev/v1beta:googlecloud_compute_instance_shielded_vm".
instance_shielded_vm(d) = x {
	x := {
		"header": instance_shielded_vm_header({
			"allowed": d.allowed,
			"subject": d.subject,
			"locator": instance_shielded_vm_locator(d),
			"severity": instance_shielded_vm_severity(d),
		}),
		"payload": d.payload,
	}
}

instance_shielded_vm_severity(d) := shisho.decision.severity_info {
	d.allowed == true
} else := d.severity {
	not is_null(d.severity)
} else := 2

instance_shielded_vm_locator(d) := d.locator {
	not is_null(d.locator)
} else := ""

instance_shielded_vm_kind = "googlecloud_compute_instance_shielded_vm"

instance_shielded_vm_header(h) = x {
	x := {
		"api_version": "decision.api.shisho.dev/v1beta",
		"kind": instance_shielded_vm_kind,
		"subject": h.subject,
		"locator": h.locator,
		"severity": h.severity,
		"labels": {},
		"annotations": {
			"decision.api.shisho.dev:googlecloud/cis-benchmark/v1.3.0": "4.8",
			"decision.api.shisho.dev:needs-manual-review": "false",
			"decision.api.shisho.dev:ssc/category": "infrastructure",
		},
		"type": shisho.decision.as_decision_type(instance_shielded_vm_allowed(h)),
	}
}

# Force to allow the given decision following resource exception policy
instance_shielded_vm_allowed(h) {
	data.params != null
	data.params.resource_exceptions != null
	shisho.resource.is_excepted(data.params.resource_exceptions, h.subject)
} else := h.allowed

# METADATA
# title: "Entry of decision.api.shisho.dev/v1beta:googlecloud_compute_instance_shielded_vm"
# scope: "rule"
# description: |
#   Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:googlecloud_compute_instance_shielded_vm
#
#   The parameter `data` is an object with the following fields: 
#   - integrity_monitoring_enabled: boolean
#   - secure_boot_enabled: boolean
#   - vtpm_enabled: boolean
#
#   For instance, `data` can take the following value:
#   ```rego
#   {
#     "integrity_monitoring_enabled": false,
#     "secure_boot_enabled": false,
#     "vtpm_enabled": false,
#   }
#   ```
instance_shielded_vm_payload(edata) = x {
	x := json.marshal(edata)
}

ENCRYPTION_KEY_TYPE_ENCRYPTION_KEY_TYPE_UNKNOWN = 0

ENCRYPTION_KEY_TYPE_ENCRYPTION_KEY_TYPE_NONE = 1

ENCRYPTION_KEY_TYPE_ENCRYPTION_KEY_TYPE_GOOGLE_MANAGED = 2

ENCRYPTION_KEY_TYPE_ENCRYPTION_KEY_TYPE_CUSTOMER_MANAGED = 3

ENCRYPTION_KEY_TYPE_ENCRYPTION_KEY_TYPE_CUSTOMER_SUPPLIED = 4

# - This code was generated by Shisho Cloud's internal system (protoc-gen-regolib).
# - When you find something to improve, you can create an GitHub issue, instead of creating pull requests.

package shisho.decision.googlecloud.iam

import data.shisho

# @title Ensure that Google Cloud permissions are granted only to principals in trusted identity sources
# You can emit this decision as follows:
# 
# ```
# import data.shisho
# 
# decisions[d] {
#   # the resource ID to review (e.g. a GitHub repository, etc.)
#   subject := "test"
#
#   # whether the target is allowed by this policy or not
#   allowed := true
#
#   d := shisho.decision.googlecloud.iam.principal_source({
#     "allowed": allowed,
#     "subject": subject,
#     "payload": shisho.decision.googlecloud.iam.principal_source_payload({
#       "source_domains": ["example"],
#     }),
#   })
# }
# ```

# METADATA
# title: "decision.api.shisho.dev/v1beta:googlecloud_iam_principal_source"
# scope: "rule"
# description: |
#   Emits a decision whose type is decision.api.shisho.dev/v1beta:googlecloud_iam_principal_source".
principal_source(d) = x {
	x := {
		"header": principal_source_header({
			"allowed": d.allowed,
			"subject": d.subject,
			"locator": principal_source_locator(d),
			"severity": principal_source_severity(d),
		}),
		"payload": d.payload,
	}
}

principal_source_severity(d) := shisho.decision.severity_info {
	d.allowed == true
} else := d.severity {
	not is_null(d.severity)
} else := 3

principal_source_locator(d) := d.locator {
	not is_null(d.locator)
} else := ""

principal_source_kind = "googlecloud_iam_principal_source"

principal_source_header(h) = x {
	x := {
		"api_version": "decision.api.shisho.dev/v1beta",
		"kind": principal_source_kind,
		"subject": h.subject,
		"locator": h.locator,
		"severity": h.severity,
		"labels": {},
		"annotations": {
			"decision.api.shisho.dev:googlecloud/cis-benchmark/v1.3.0": "1.1",
			"decision.api.shisho.dev:needs-manual-review": "true",
			"decision.api.shisho.dev:ssc/category": "infrastructure",
		},
		"type": shisho.decision.as_decision_type(principal_source_allowed(h)),
	}
}

# Force to allow the given decision following resource exception policy
principal_source_allowed(h) {
	data.params != null
	data.params.resource_exceptions != null
	shisho.resource.is_excepted(data.params.resource_exceptions, h.subject)
} else := h.allowed

# METADATA
# title: "Entry of decision.api.shisho.dev/v1beta:googlecloud_iam_principal_source"
# scope: "rule"
# description: |
#   Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:googlecloud_iam_principal_source
#
#   The parameter `data` is an object with the following fields: 
#   - source_domains: string
#
#   For instance, `data` can take the following value:
#   ```rego
#   {
#     "source_domains": ["example"],
#   }
#   ```
principal_source_payload(edata) = x {
	x := json.marshal(edata)
}

# @title Ensure that each service account has only the minimum number of keys required
# You can emit this decision as follows:
# 
# ```
# import data.shisho
# 
# decisions[d] {
#   # the resource ID to review (e.g. a GitHub repository, etc.)
#   subject := "test"
#
#   # whether the target is allowed by this policy or not
#   allowed := true
#
#   d := shisho.decision.googlecloud.iam.service_account_key({
#     "allowed": allowed,
#     "subject": subject,
#     "payload": shisho.decision.googlecloud.iam.service_account_key_payload({
#       "keys": ["example"],
#     }),
#   })
# }
# ```

# METADATA
# title: "decision.api.shisho.dev/v1beta:googlecloud_iam_service_account_key"
# scope: "rule"
# description: |
#   Emits a decision whose type is decision.api.shisho.dev/v1beta:googlecloud_iam_service_account_key".
service_account_key(d) = x {
	x := {
		"header": service_account_key_header({
			"allowed": d.allowed,
			"subject": d.subject,
			"locator": service_account_key_locator(d),
			"severity": service_account_key_severity(d),
		}),
		"payload": d.payload,
	}
}

service_account_key_severity(d) := shisho.decision.severity_info {
	d.allowed == true
} else := d.severity {
	not is_null(d.severity)
} else := 2

service_account_key_locator(d) := d.locator {
	not is_null(d.locator)
} else := ""

service_account_key_kind = "googlecloud_iam_service_account_key"

service_account_key_header(h) = x {
	x := {
		"api_version": "decision.api.shisho.dev/v1beta",
		"kind": service_account_key_kind,
		"subject": h.subject,
		"locator": h.locator,
		"severity": h.severity,
		"labels": {},
		"annotations": {
			"decision.api.shisho.dev:googlecloud/cis-benchmark/v1.3.0": "1.4",
			"decision.api.shisho.dev:needs-manual-review": "false",
			"decision.api.shisho.dev:ssc/category": "infrastructure",
		},
		"type": shisho.decision.as_decision_type(service_account_key_allowed(h)),
	}
}

# Force to allow the given decision following resource exception policy
service_account_key_allowed(h) {
	data.params != null
	data.params.resource_exceptions != null
	shisho.resource.is_excepted(data.params.resource_exceptions, h.subject)
} else := h.allowed

# METADATA
# title: "Entry of decision.api.shisho.dev/v1beta:googlecloud_iam_service_account_key"
# scope: "rule"
# description: |
#   Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:googlecloud_iam_service_account_key
#
#   The parameter `data` is an object with the following fields: 
#   - keys: string
#
#   For instance, `data` can take the following value:
#   ```rego
#   {
#     "keys": ["example"],
#   }
#   ```
service_account_key_payload(edata) = x {
	x := json.marshal(edata)
}

# @title Ensure Google Cloud service accounts have admin privileges only when truly required
# You can emit this decision as follows:
# 
# ```
# import data.shisho
# 
# decisions[d] {
#   # the resource ID to review (e.g. a GitHub repository, etc.)
#   subject := "test"
#
#   # whether the target is allowed by this policy or not
#   allowed := true
#
#   d := shisho.decision.googlecloud.iam.service_account_project_admin_role({
#     "allowed": allowed,
#     "subject": subject,
#     "payload": shisho.decision.googlecloud.iam.service_account_project_admin_role_payload({
#       "suspicious_bindings": [{"service_account_email": "example", "role": "example"}],
#     }),
#   })
# }
# ```

# METADATA
# title: "decision.api.shisho.dev/v1beta:googlecloud_iam_service_account_project_admin_role"
# scope: "rule"
# description: |
#   Emits a decision whose type is decision.api.shisho.dev/v1beta:googlecloud_iam_service_account_project_admin_role".
service_account_project_admin_role(d) = x {
	x := {
		"header": service_account_project_admin_role_header({
			"allowed": d.allowed,
			"subject": d.subject,
			"locator": service_account_project_admin_role_locator(d),
			"severity": service_account_project_admin_role_severity(d),
		}),
		"payload": d.payload,
	}
}

service_account_project_admin_role_severity(d) := shisho.decision.severity_info {
	d.allowed == true
} else := d.severity {
	not is_null(d.severity)
} else := 2

service_account_project_admin_role_locator(d) := d.locator {
	not is_null(d.locator)
} else := ""

service_account_project_admin_role_kind = "googlecloud_iam_service_account_project_admin_role"

service_account_project_admin_role_header(h) = x {
	x := {
		"api_version": "decision.api.shisho.dev/v1beta",
		"kind": service_account_project_admin_role_kind,
		"subject": h.subject,
		"locator": h.locator,
		"severity": h.severity,
		"labels": {},
		"annotations": {
			"decision.api.shisho.dev:googlecloud/cis-benchmark/v1.3.0": "1.5",
			"decision.api.shisho.dev:needs-manual-review": "true",
			"decision.api.shisho.dev:ssc/category": "infrastructure",
		},
		"type": shisho.decision.as_decision_type(service_account_project_admin_role_allowed(h)),
	}
}

# Force to allow the given decision following resource exception policy
service_account_project_admin_role_allowed(h) {
	data.params != null
	data.params.resource_exceptions != null
	shisho.resource.is_excepted(data.params.resource_exceptions, h.subject)
} else := h.allowed

# METADATA
# title: "Entry of decision.api.shisho.dev/v1beta:googlecloud_iam_service_account_project_admin_role"
# scope: "rule"
# description: |
#   Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:googlecloud_iam_service_account_project_admin_role
#
#   The parameter `data` is an object with the following fields: 
#   - suspicious_bindings: {"service_account_email": string, "role": string}
#
#   For instance, `data` can take the following value:
#   ```rego
#   {
#     "suspicious_bindings": [{"service_account_email": "example", "role": "example"}],
#   }
#   ```
service_account_project_admin_role_payload(edata) = x {
	x := json.marshal(edata)
}

# @title Ensure a Cloud IAM principal can impersonate or attach only a limited set of service accounts
# You can emit this decision as follows:
# 
# ```
# import data.shisho
# 
# decisions[d] {
#   # the resource ID to review (e.g. a GitHub repository, etc.)
#   subject := "test"
#
#   # whether the target is allowed by this policy or not
#   allowed := true
#
#   d := shisho.decision.googlecloud.iam.service_account_project_impersonation_role({
#     "allowed": allowed,
#     "subject": subject,
#     "payload": shisho.decision.googlecloud.iam.service_account_project_impersonation_role_payload({
#       "permissive_principals": ["example"],
#     }),
#   })
# }
# ```

# METADATA
# title: "decision.api.shisho.dev/v1beta:googlecloud_iam_service_account_project_impersonation_role"
# scope: "rule"
# description: |
#   Emits a decision whose type is decision.api.shisho.dev/v1beta:googlecloud_iam_service_account_project_impersonation_role".
service_account_project_impersonation_role(d) = x {
	x := {
		"header": service_account_project_impersonation_role_header({
			"allowed": d.allowed,
			"subject": d.subject,
			"locator": service_account_project_impersonation_role_locator(d),
			"severity": service_account_project_impersonation_role_severity(d),
		}),
		"payload": d.payload,
	}
}

service_account_project_impersonation_role_severity(d) := shisho.decision.severity_info {
	d.allowed == true
} else := d.severity {
	not is_null(d.severity)
} else := 2

service_account_project_impersonation_role_locator(d) := d.locator {
	not is_null(d.locator)
} else := ""

service_account_project_impersonation_role_kind = "googlecloud_iam_service_account_project_impersonation_role"

service_account_project_impersonation_role_header(h) = x {
	x := {
		"api_version": "decision.api.shisho.dev/v1beta",
		"kind": service_account_project_impersonation_role_kind,
		"subject": h.subject,
		"locator": h.locator,
		"severity": h.severity,
		"labels": {},
		"annotations": {
			"decision.api.shisho.dev:googlecloud/cis-benchmark/v1.3.0": "1.6",
			"decision.api.shisho.dev:needs-manual-review": "false",
			"decision.api.shisho.dev:ssc/category": "infrastructure",
		},
		"type": shisho.decision.as_decision_type(service_account_project_impersonation_role_allowed(h)),
	}
}

# Force to allow the given decision following resource exception policy
service_account_project_impersonation_role_allowed(h) {
	data.params != null
	data.params.resource_exceptions != null
	shisho.resource.is_excepted(data.params.resource_exceptions, h.subject)
} else := h.allowed

# METADATA
# title: "Entry of decision.api.shisho.dev/v1beta:googlecloud_iam_service_account_project_impersonation_role"
# scope: "rule"
# description: |
#   Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:googlecloud_iam_service_account_project_impersonation_role
#
#   The parameter `data` is an object with the following fields: 
#   - permissive_principals: string
#
#   For instance, `data` can take the following value:
#   ```rego
#   {
#     "permissive_principals": ["example"],
#   }
#   ```
service_account_project_impersonation_role_payload(edata) = x {
	x := json.marshal(edata)
}

# - This code was generated by Shisho Cloud's internal system (protoc-gen-regolib).
# - When you find something to improve, you can create an GitHub issue, instead of creating pull requests.

package shisho.decision.googlecloud.networking

import data.shisho

# @title Ensure the default network does not exist in Google Cloud projects
# You can emit this decision as follows:
# 
# ```
# import data.shisho
# 
# decisions[d] {
#   # the resource ID to review (e.g. a GitHub repository, etc.)
#   subject := "test"
#
#   # whether the target is allowed by this policy or not
#   allowed := true
#
#   d := shisho.decision.googlecloud.networking.default_network({
#     "allowed": allowed,
#     "subject": subject,
#     "payload": shisho.decision.googlecloud.networking.default_network_payload({
#       "default_network_exists": false,
#     }),
#   })
# }
# ```

# METADATA
# title: "decision.api.shisho.dev/v1beta:googlecloud_networking_default_network"
# scope: "rule"
# description: |
#   Emits a decision whose type is decision.api.shisho.dev/v1beta:googlecloud_networking_default_network".
default_network(d) = x {
	x := {
		"header": default_network_header({
			"allowed": d.allowed,
			"subject": d.subject,
			"locator": default_network_locator(d),
			"severity": default_network_severity(d),
		}),
		"payload": d.payload,
	}
}

default_network_severity(d) := shisho.decision.severity_info {
	d.allowed == true
} else := d.severity {
	not is_null(d.severity)
} else := 0

default_network_locator(d) := d.locator {
	not is_null(d.locator)
} else := ""

default_network_kind = "googlecloud_networking_default_network"

default_network_header(h) = x {
	x := {
		"api_version": "decision.api.shisho.dev/v1beta",
		"kind": default_network_kind,
		"subject": h.subject,
		"locator": h.locator,
		"severity": h.severity,
		"labels": {},
		"annotations": {
			"decision.api.shisho.dev:googlecloud/cis-benchmark/v1.3.0": "3.1",
			"decision.api.shisho.dev:needs-manual-review": "false",
			"decision.api.shisho.dev:ssc/category": "infrastructure",
		},
		"type": shisho.decision.as_decision_type(default_network_allowed(h)),
	}
}

# Force to allow the given decision following resource exception policy
default_network_allowed(h) {
	data.params != null
	data.params.resource_exceptions != null
	shisho.resource.is_excepted(data.params.resource_exceptions, h.subject)
} else := h.allowed

# METADATA
# title: "Entry of decision.api.shisho.dev/v1beta:googlecloud_networking_default_network"
# scope: "rule"
# description: |
#   Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:googlecloud_networking_default_network
#
#   The parameter `data` is an object with the following fields: 
#   - default_network_exists: boolean
#
#   For instance, `data` can take the following value:
#   ```rego
#   {
#     "default_network_exists": false,
#   }
#   ```
default_network_payload(edata) = x {
	x := json.marshal(edata)
}

# @title Ensure Cloud DNS Logging is enabled for all VPC networks
# You can emit this decision as follows:
# 
# ```
# import data.shisho
# 
# decisions[d] {
#   # the resource ID to review (e.g. a GitHub repository, etc.)
#   subject := "test"
#
#   # whether the target is allowed by this policy or not
#   allowed := true
#
#   d := shisho.decision.googlecloud.networking.dns_log({
#     "allowed": allowed,
#     "subject": subject,
#     "payload": shisho.decision.googlecloud.networking.dns_log_payload({
#       "log_enabled": false,
#     }),
#   })
# }
# ```

# METADATA
# title: "decision.api.shisho.dev/v1beta:googlecloud_networking_dns_log"
# scope: "rule"
# description: |
#   Emits a decision whose type is decision.api.shisho.dev/v1beta:googlecloud_networking_dns_log".
dns_log(d) = x {
	x := {
		"header": dns_log_header({
			"allowed": d.allowed,
			"subject": d.subject,
			"locator": dns_log_locator(d),
			"severity": dns_log_severity(d),
		}),
		"payload": d.payload,
	}
}

dns_log_severity(d) := shisho.decision.severity_info {
	d.allowed == true
} else := d.severity {
	not is_null(d.severity)
} else := 0

dns_log_locator(d) := d.locator {
	not is_null(d.locator)
} else := ""

dns_log_kind = "googlecloud_networking_dns_log"

dns_log_header(h) = x {
	x := {
		"api_version": "decision.api.shisho.dev/v1beta",
		"kind": dns_log_kind,
		"subject": h.subject,
		"locator": h.locator,
		"severity": h.severity,
		"labels": {},
		"annotations": {
			"decision.api.shisho.dev:googlecloud/cis-benchmark/v1.3.0": "2.12",
			"decision.api.shisho.dev:needs-manual-review": "false",
			"decision.api.shisho.dev:ssc/category": "infrastructure",
		},
		"type": shisho.decision.as_decision_type(dns_log_allowed(h)),
	}
}

# Force to allow the given decision following resource exception policy
dns_log_allowed(h) {
	data.params != null
	data.params.resource_exceptions != null
	shisho.resource.is_excepted(data.params.resource_exceptions, h.subject)
} else := h.allowed

# METADATA
# title: "Entry of decision.api.shisho.dev/v1beta:googlecloud_networking_dns_log"
# scope: "rule"
# description: |
#   Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:googlecloud_networking_dns_log
#
#   The parameter `data` is an object with the following fields: 
#   - log_enabled: boolean
#
#   For instance, `data` can take the following value:
#   ```rego
#   {
#     "log_enabled": false,
#   }
#   ```
dns_log_payload(edata) = x {
	x := json.marshal(edata)
}

# @title Ensure that Cloud Load Balancing uses TLS policies with strong cipher suites
# You can emit this decision as follows:
# 
# ```
# import data.shisho
# 
# decisions[d] {
#   # the resource ID to review (e.g. a GitHub repository, etc.)
#   subject := "test"
#
#   # whether the target is allowed by this policy or not
#   allowed := true
#
#   d := shisho.decision.googlecloud.networking.proxy_tls_policy({
#     "allowed": allowed,
#     "subject": subject,
#     "payload": shisho.decision.googlecloud.networking.proxy_tls_policy_payload({
#       "tls_policy_attached": false,
#     }),
#   })
# }
# ```

# METADATA
# title: "decision.api.shisho.dev/v1beta:googlecloud_networking_proxy_tls_policy"
# scope: "rule"
# description: |
#   Emits a decision whose type is decision.api.shisho.dev/v1beta:googlecloud_networking_proxy_tls_policy".
proxy_tls_policy(d) = x {
	x := {
		"header": proxy_tls_policy_header({
			"allowed": d.allowed,
			"subject": d.subject,
			"locator": proxy_tls_policy_locator(d),
			"severity": proxy_tls_policy_severity(d),
		}),
		"payload": d.payload,
	}
}

proxy_tls_policy_severity(d) := shisho.decision.severity_info {
	d.allowed == true
} else := d.severity {
	not is_null(d.severity)
} else := 2

proxy_tls_policy_locator(d) := d.locator {
	not is_null(d.locator)
} else := ""

proxy_tls_policy_kind = "googlecloud_networking_proxy_tls_policy"

proxy_tls_policy_header(h) = x {
	x := {
		"api_version": "decision.api.shisho.dev/v1beta",
		"kind": proxy_tls_policy_kind,
		"subject": h.subject,
		"locator": h.locator,
		"severity": h.severity,
		"labels": {},
		"annotations": {
			"decision.api.shisho.dev:googlecloud/cis-benchmark/v1.3.0": "3.9",
			"decision.api.shisho.dev:needs-manual-review": "false",
			"decision.api.shisho.dev:ssc/category": "infrastructure",
		},
		"type": shisho.decision.as_decision_type(proxy_tls_policy_allowed(h)),
	}
}

# Force to allow the given decision following resource exception policy
proxy_tls_policy_allowed(h) {
	data.params != null
	data.params.resource_exceptions != null
	shisho.resource.is_excepted(data.params.resource_exceptions, h.subject)
} else := h.allowed

# METADATA
# title: "Entry of decision.api.shisho.dev/v1beta:googlecloud_networking_proxy_tls_policy"
# scope: "rule"
# description: |
#   Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:googlecloud_networking_proxy_tls_policy
#
#   The parameter `data` is an object with the following fields: 
#   - tls_policy_attached: boolean
#
#   For instance, `data` can take the following value:
#   ```rego
#   {
#     "tls_policy_attached": false,
#   }
#   ```
proxy_tls_policy_payload(edata) = x {
	x := json.marshal(edata)
}

# @title Ensure RDP access to Google Cloud resources is restricted from the Internet
# You can emit this decision as follows:
# 
# ```
# import data.shisho
# 
# decisions[d] {
#   # the resource ID to review (e.g. a GitHub repository, etc.)
#   subject := "test"
#
#   # whether the target is allowed by this policy or not
#   allowed := true
#
#   d := shisho.decision.googlecloud.networking.rdp_access({
#     "allowed": allowed,
#     "subject": subject,
#     "payload": shisho.decision.googlecloud.networking.rdp_access_payload({
#       "exposed_surfaces": [{"network_self_link": "example"}],
#     }),
#   })
# }
# ```

# METADATA
# title: "decision.api.shisho.dev/v1beta:googlecloud_networking_rdp_access"
# scope: "rule"
# description: |
#   Emits a decision whose type is decision.api.shisho.dev/v1beta:googlecloud_networking_rdp_access".
rdp_access(d) = x {
	x := {
		"header": rdp_access_header({
			"allowed": d.allowed,
			"subject": d.subject,
			"locator": rdp_access_locator(d),
			"severity": rdp_access_severity(d),
		}),
		"payload": d.payload,
	}
}

rdp_access_severity(d) := shisho.decision.severity_info {
	d.allowed == true
} else := d.severity {
	not is_null(d.severity)
} else := 3

rdp_access_locator(d) := d.locator {
	not is_null(d.locator)
} else := ""

rdp_access_kind = "googlecloud_networking_rdp_access"

rdp_access_header(h) = x {
	x := {
		"api_version": "decision.api.shisho.dev/v1beta",
		"kind": rdp_access_kind,
		"subject": h.subject,
		"locator": h.locator,
		"severity": h.severity,
		"labels": {},
		"annotations": {
			"decision.api.shisho.dev:googlecloud/cis-benchmark/v1.3.0": "3.6",
			"decision.api.shisho.dev:needs-manual-review": "false",
			"decision.api.shisho.dev:ssc/category": "infrastructure",
		},
		"type": shisho.decision.as_decision_type(rdp_access_allowed(h)),
	}
}

# Force to allow the given decision following resource exception policy
rdp_access_allowed(h) {
	data.params != null
	data.params.resource_exceptions != null
	shisho.resource.is_excepted(data.params.resource_exceptions, h.subject)
} else := h.allowed

# METADATA
# title: "Entry of decision.api.shisho.dev/v1beta:googlecloud_networking_rdp_access"
# scope: "rule"
# description: |
#   Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:googlecloud_networking_rdp_access
#
#   The parameter `data` is an object with the following fields: 
#   - exposed_surfaces: {"network_self_link": string}
#
#   For instance, `data` can take the following value:
#   ```rego
#   {
#     "exposed_surfaces": [{"network_self_link": "example"}],
#   }
#   ```
rdp_access_payload(edata) = x {
	x := json.marshal(edata)
}

# @title Ensure SSH access to Google Cloud resources is restricted from the Internet
# You can emit this decision as follows:
# 
# ```
# import data.shisho
# 
# decisions[d] {
#   # the resource ID to review (e.g. a GitHub repository, etc.)
#   subject := "test"
#
#   # whether the target is allowed by this policy or not
#   allowed := true
#
#   d := shisho.decision.googlecloud.networking.ssh_access({
#     "allowed": allowed,
#     "subject": subject,
#     "payload": shisho.decision.googlecloud.networking.ssh_access_payload({
#       "exposed_surfaces": [{"network_self_link": "example"}],
#     }),
#   })
# }
# ```

# METADATA
# title: "decision.api.shisho.dev/v1beta:googlecloud_networking_ssh_access"
# scope: "rule"
# description: |
#   Emits a decision whose type is decision.api.shisho.dev/v1beta:googlecloud_networking_ssh_access".
ssh_access(d) = x {
	x := {
		"header": ssh_access_header({
			"allowed": d.allowed,
			"subject": d.subject,
			"locator": ssh_access_locator(d),
			"severity": ssh_access_severity(d),
		}),
		"payload": d.payload,
	}
}

ssh_access_severity(d) := shisho.decision.severity_info {
	d.allowed == true
} else := d.severity {
	not is_null(d.severity)
} else := 3

ssh_access_locator(d) := d.locator {
	not is_null(d.locator)
} else := ""

ssh_access_kind = "googlecloud_networking_ssh_access"

ssh_access_header(h) = x {
	x := {
		"api_version": "decision.api.shisho.dev/v1beta",
		"kind": ssh_access_kind,
		"subject": h.subject,
		"locator": h.locator,
		"severity": h.severity,
		"labels": {},
		"annotations": {
			"decision.api.shisho.dev:googlecloud/cis-benchmark/v1.3.0": "3.6",
			"decision.api.shisho.dev:needs-manual-review": "false",
			"decision.api.shisho.dev:ssc/category": "infrastructure",
		},
		"type": shisho.decision.as_decision_type(ssh_access_allowed(h)),
	}
}

# Force to allow the given decision following resource exception policy
ssh_access_allowed(h) {
	data.params != null
	data.params.resource_exceptions != null
	shisho.resource.is_excepted(data.params.resource_exceptions, h.subject)
} else := h.allowed

# METADATA
# title: "Entry of decision.api.shisho.dev/v1beta:googlecloud_networking_ssh_access"
# scope: "rule"
# description: |
#   Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:googlecloud_networking_ssh_access
#
#   The parameter `data` is an object with the following fields: 
#   - exposed_surfaces: {"network_self_link": string}
#
#   For instance, `data` can take the following value:
#   ```rego
#   {
#     "exposed_surfaces": [{"network_self_link": "example"}],
#   }
#   ```
ssh_access_payload(edata) = x {
	x := json.marshal(edata)
}

# @title Ensure VPC Flow Logs feature is enabled for critical VPC networks and subnets
# You can emit this decision as follows:
# 
# ```
# import data.shisho
# 
# decisions[d] {
#   # the resource ID to review (e.g. a GitHub repository, etc.)
#   subject := "test"
#
#   # whether the target is allowed by this policy or not
#   allowed := true
#
#   d := shisho.decision.googlecloud.networking.vpc_flow_log({
#     "allowed": allowed,
#     "subject": subject,
#     "payload": shisho.decision.googlecloud.networking.vpc_flow_log_payload({
#       "flow_log_enabled": false,
#     }),
#   })
# }
# ```

# METADATA
# title: "decision.api.shisho.dev/v1beta:googlecloud_networking_vpc_flow_log"
# scope: "rule"
# description: |
#   Emits a decision whose type is decision.api.shisho.dev/v1beta:googlecloud_networking_vpc_flow_log".
vpc_flow_log(d) = x {
	x := {
		"header": vpc_flow_log_header({
			"allowed": d.allowed,
			"subject": d.subject,
			"locator": vpc_flow_log_locator(d),
			"severity": vpc_flow_log_severity(d),
		}),
		"payload": d.payload,
	}
}

vpc_flow_log_severity(d) := shisho.decision.severity_info {
	d.allowed == true
} else := d.severity {
	not is_null(d.severity)
} else := 2

vpc_flow_log_locator(d) := d.locator {
	not is_null(d.locator)
} else := ""

vpc_flow_log_kind = "googlecloud_networking_vpc_flow_log"

vpc_flow_log_header(h) = x {
	x := {
		"api_version": "decision.api.shisho.dev/v1beta",
		"kind": vpc_flow_log_kind,
		"subject": h.subject,
		"locator": h.locator,
		"severity": h.severity,
		"labels": {},
		"annotations": {
			"decision.api.shisho.dev:googlecloud/cis-benchmark/v1.3.0": "3.8",
			"decision.api.shisho.dev:needs-manual-review": "true",
			"decision.api.shisho.dev:ssc/category": "infrastructure",
		},
		"type": shisho.decision.as_decision_type(vpc_flow_log_allowed(h)),
	}
}

# Force to allow the given decision following resource exception policy
vpc_flow_log_allowed(h) {
	data.params != null
	data.params.resource_exceptions != null
	shisho.resource.is_excepted(data.params.resource_exceptions, h.subject)
} else := h.allowed

# METADATA
# title: "Entry of decision.api.shisho.dev/v1beta:googlecloud_networking_vpc_flow_log"
# scope: "rule"
# description: |
#   Emits a decision entry describing the detail of a decision decision.api.shisho.dev/v1beta:googlecloud_networking_vpc_flow_log
#
#   The parameter `data` is an object with the following fields: 
#   - flow_log_enabled: boolean
#
#   For instance, `data` can take the following value:
#   ```rego
#   {
#     "flow_log_enabled": false,
#   }
#   ```
vpc_flow_log_payload(edata) = x {
	x := json.marshal(edata)
}
